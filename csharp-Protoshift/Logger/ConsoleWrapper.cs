using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;

namespace YYHEggEgg.Logger
{
    // Mainly generated by ChatGPT
    public class ConsoleWrapper
    {
        private static List<string> lines; // 记录每行输入的列表
        private static int currentLine; // 当前所在行的标记
        public event EventHandler<InputArrivalEventArgs>? InputArrival; // 输入完成事件
        public event EventHandler<InputChangeEventArgs>? InputChange; // 输入内容改变事件
        public static event EventHandler? ShutDown; // 退出事件

        private static bool isReading;
        public static int RefreshTicks { get; set; }

        static ConsoleWrapper()
        {
            lines = new List<string>();
            currentLine = 0;
            Console.CancelKeyPress += Console_CancelKeyPress;
            InputPrefix = "";
        }

        private static void Console_CancelKeyPress(object? sender, ConsoleCancelEventArgs e)
        {
            e.Cancel = true;
            ShutDown?.Invoke(this, EventArgs.Empty);
        }

        #region Refresh Prefix
        // Reference:
        // [ Can Console.Clear be used to only clear a line instead of whole console? ]
        // https://stackoverflow.com/questions/8946808/can-console-clear-be-used-to-only-clear-a-line-instead-of-whole-console
        // Applied some modifications to support only clear current line.
        private static void ClearThisLine()
        {
            // if (Console.CursorTop > 0) Console.SetCursorPosition(0, Console.CursorTop - 1);
            int currentLineCursor = Console.CursorTop;
            Console.SetCursorPosition(0, Console.CursorTop);
            Console.Write(new string(' ', Console.WindowWidth));
            Console.SetCursorPosition(0, currentLineCursor);
        }

        public static string InputPrefix { get; set; }
        private static bool AddPrefix;
        private static object PrefixLock = "YYHEggEgg.Logger";

        public static void BeginRead()
        {
            AddPrefix = true;
            lock (PrefixLock)
            {
                ClearThisLine();
                Console.Write(InputPrefix);
            }
        }

        public static void EndRead()
        {
            AddPrefix = false;
            lock (PrefixLock)
            {
                ClearThisLine();
            }
        }

        public static 

        private static void ClearWrittingArea(int writtenLength)
        {
            int occupiedLength = InputPrefix.Length + writtenLength;
            while (occupiedLength > 0)
            {
                ClearThisLine();
                occupiedLength -= Console.WindowWidth;
                if (occupiedLength > 0)
                {
                    Console.SetCursorPosition(0, Console.CursorTop - 1);
                }
            }
        }
        #endregion

        public static void Start()
        {
            Console.TreatControlCAsInput = true; // 允许Ctrl+C被视为输入
            ConsoleKeyInfo keyInfo;
            bool isCtrlV = false;
            string pasteText = "";
            StringBuilder input = new();
            int cursor = 0;
            while (true)
            {
                keyInfo = Console.ReadKey(isReading);
                #region 清除整行的操作
                if (keyInfo.Key == ConsoleKey.Enter) // 整合输入的所有字符
                {
                    lines.Add(input.ToString());
                    InputArrival?.Invoke(this, new InputArrivalEventArgs(lines));
                    currentLine = lines.Count;

                    Console.WriteLine();
                    input = new();
                    cursor = 0;
                    Console.Write(InputPrefix);
                }
                else if (keyInfo.Key == ConsoleKey.UpArrow) // 切换cursor至上一行
                {
                    if (currentLine > 0)
                    {
                        currentLine--;
                        input = new(lines[currentLine]);
                        cursor = input.Length;
                        InputChange?.Invoke(this, new InputChangeEventArgs(lines[currentLine]));
                        ClearWrittingArea(input.Length);
                        Console.Write(InputPrefix);
                        Console.Write(input);
                    }
                }
                else if (keyInfo.Key == ConsoleKey.DownArrow) // 切换cursor至下一行
                {
                    if (currentLine < lines.Count - 1)
                    {
                        currentLine++;
                        input = new(lines[currentLine]);
                        cursor = input.Length;
                        InputChange?.Invoke(this, new InputChangeEventArgs(lines[currentLine]));
                        ClearWrittingArea(input.Length);
                        Console.Write(InputPrefix);
                        Console.Write(input);
                    }
                }
                #endregion
                else if (
                    keyInfo.Key == ConsoleKey.C && keyInfo.Modifiers == ConsoleModifiers.Control
                ) // 触发ShutDown事件
                {
                    ShutDown?.Invoke(this, EventArgs.Empty);
                    return;
                }
                #region 主要处理光标的操作
                else if (
                    keyInfo.Key == ConsoleKey.V && keyInfo.Modifiers == ConsoleModifiers.Control
                ) // 粘贴剪贴板内容
                {
                    // Automatically handled by .NET Console
                    //pasteText = Clipboard.GetText();
                    //isCtrlV = true;
                }
                else if (keyInfo.Key == ConsoleKey.Backspace) // 处理退格
                {
                    if (input.Length > 0)
                    {
                        input.Remove(input.Length - 1, 1);
                        cursor = input.Length;
                        // 按下 backspace 后，控制台会自动使光标后退一格，但不删除字符
                        int currentCursorLeft = Console.CursorLeft;
                        int currentCursorTop = Console.CursorTop;
                        Console.Write(' ');
                        Console.SetCursorPosition(currentCursorLeft, currentCursorTop);
                    }
                }
                else if (keyInfo.Key == ConsoleKey.Home)
                {
                    cursor = 0;
                }
                else if (keyInfo.Key == ConsoleKey.End)
                {
                    cursor = input.Length;
                }
                else if (keyInfo.Key == ConsoleKey.LeftArrow)
                {
                    if (cursor > 0)
                    {
                        cursor--;
                        #region 控制台光标操作
                        // 按下上下左右键后，控制台光标不移动
                        int currentCursorLeft = Console.CursorLeft;
                        int currentCursorTop = Console.CursorTop;
                        if (currentCursorLeft == 0)
                            Console.SetCursorPosition(Console.WindowWidth, currentCursorTop - 1);
                        else 
                            Console.SetCursorPosition(currentCursorLeft - 1, currentCursorTop);
                        #endregion
                    }
                }
                else if (keyInfo.Key == ConsoleKey.RightArrow)
                {
                    if (cursor < input.Length)
                    {
                        cursor++;
                        #region 控制台光标操作
                        // 按下上下左右键后，控制台光标不移动
                        int currentCursorLeft = Console.CursorLeft;
                        int currentCursorTop = Console.CursorTop;
                        if (currentCursorLeft == Console.WindowWidth)
                            Console.SetCursorPosition(0, currentCursorTop + 1);
                        else
                            Console.SetCursorPosition(currentCursorLeft + 1, currentCursorTop);
                        #endregion
                    }
                }
                #endregion
                else
                {
                    input.Insert(cursor, keyInfo.KeyChar);
                    cursor++;
                }

                if (isCtrlV) // 粘贴剪贴板内容
                {
                    input += pasteText;
                    isCtrlV = false;
                }

                Console.WriteLine(string.Join(Environment.NewLine, lines));
                Console.Write("> " + input);
            }
        }
    }

    public class InputArrivalEventArgs : EventArgs
    {
        public readonly List<string> Lines;

        public InputArrivalEventArgs(List<string> lines)
        {
            Lines = lines;
        }
    }

    public class InputChangeEventArgs : EventArgs
    {
        public readonly string Line;

        public InputChangeEventArgs(string line)
        {
            Line = line;
        }
    }
}