using System;
using System.Collections.Generic;
using System.Windows;

namespace YYHEggEgg.Logger
{
    // Mainly generated by ChatGPT
    public class ConsoleWrapper
    {
        private List<string> lines; // 记录每行输入的列表
        private int cursor; // 当前所在行的标记
        public event EventHandler<InputArrivalEventArgs> InputArrival; // 输入完成事件
        public event EventHandler<InputChangeEventArgs> InputChange; // 输入内容改变事件
        public event EventHandler ShutDown; // 退出事件

        public ConsoleWrapper()
        {
            lines = new List<string>();
            cursor = 0;
            Console.CancelKeyPress += Console_CancelKeyPress;
        }

        private void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)
        {
            e.Cancel = true;
            ShutDown?.Invoke(this, EventArgs.Empty);
        }

        public void Start()
        {
            Console.TreatControlCAsInput = true; // 允许Ctrl+C被视为输入
            ConsoleKeyInfo keyInfo;
            bool isCtrlV = false;
            string pasteText = "";
            string input = "";
            while (true)
            {
                keyInfo = Console.ReadKey(true);
                if (keyInfo.Key == ConsoleKey.Enter) // 整合输入的所有字符
                {
                    lines.Add(input);
                    InputArrival?.Invoke(this, new InputArrivalEventArgs(lines));
                    cursor = lines.Count - 1;
                    input = "";
                }
                else if (keyInfo.Key == ConsoleKey.UpArrow) // 切换cursor至上一行
                {
                    if (cursor > 0)
                    {
                        cursor--;
                        InputChange?.Invoke(this, new InputChangeEventArgs(lines[cursor]));
                    }
                }
                else if (keyInfo.Key == ConsoleKey.DownArrow) // 切换cursor至下一行
                {
                    if (cursor < lines.Count - 1)
                    {
                        cursor++;
                        InputChange?.Invoke(this, new InputChangeEventArgs(lines[cursor]));
                    }
                }
                else if (
                    keyInfo.Key == ConsoleKey.V && keyInfo.Modifiers == ConsoleModifiers.Control
                ) // 粘贴剪贴板内容
                {
                    pasteText = Clipboard.GetText();
                    isCtrlV = true;
                }
                else if (
                    keyInfo.Key == ConsoleKey.C && keyInfo.Modifiers == ConsoleModifiers.Control
                ) // 触发ShutDown事件
                {
                    ShutDown?.Invoke(this, EventArgs.Empty);
                    return;
                }
                else if (keyInfo.Key == ConsoleKey.Backspace) // 处理退格
                {
                    if (input.Length > 0)
                    {
                        input = input.Remove(input.Length - 1);
                    }
                }
                else
                {
                    input += keyInfo.KeyChar;
                }

                if (isCtrlV) // 粘贴剪贴板内容
                {
                    input += pasteText;
                    isCtrlV = false;
                }

                Console.Clear();
                Console.WriteLine(string.Join(Environment.NewLine, lines));
                Console.Write("> " + input);
            }
        }
    }

    public class InputArrivalEventArgs : EventArgs
    {
        public readonly List<string> Lines;

        public InputArrivalEventArgs(List<string> lines)
        {
            Lines = lines;
        }
    }

    public class InputChangeEventArgs : EventArgs
    {
        public readonly string Line;

        public InputChangeEventArgs(string line)
        {
            Line = line;
        }
    }
}