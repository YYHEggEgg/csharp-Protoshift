// Below is human-written, acting as an generated code example.
// 
// ------------------------------------------------------------
//
// <auto-generated>
//     Generated by csharp-Protoshift.HandlerGenerator. 
// </auto-generated>

#nullable enable
#region Designer Generated Code
using csharp_Protoshift.ProtoHotPatch;
using Google.Protobuf;
using Google.Protobuf.Collections;
using Google.Protobuf.Reflection;
using System.Collections.Generic;

namespace csharp_Protoshift.Enhanced.Handlers.GeneratedCode
{
    public class HandlerInMessage 
        : HandlerBase<NewProtos.InMessage, OldProtos.InMessage>
    {
        #region Base Type
        MessageParser<NewProtos.InMessage> newproto_parser_base = NewProtos.InMessage.Parser;
        MessageParser<OldProtos.InMessage> oldproto_parser_base = OldProtos.InMessage.Parser;
        #endregion
        #region Import Types
        public static string[] ImportedHandlers = new string[] {
            };
        #endregion

        public bool HasSkillIssue = true;

        #region Protocol shift
        public override OldProtos.InMessage? NewShiftToOld(NewProtos.InMessage? newprotocol)
        {
            if (newprotocol == null) return null;
            OldProtos.InMessage oldprotocol = new();
            oldprotocol.InStr = newprotocol.InStr;
            oldprotocol.Code = newprotocol.Code;
            return oldprotocol;
        }

        public override NewProtos.InMessage? OldShiftToNew(OldProtos.InMessage? oldprotocol)
        {
            if (oldprotocol == null) return null;
            NewProtos.InMessage newprotocol = new();
            newprotocol.InStr = oldprotocol.InStr;
            newprotocol.Code = oldprotocol.Code;
            return newprotocol;
        }

        #region JIT API
        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("YYHEggEgg/csharp_Protoshift.HandlerGenerator", "1.0.0.0")]
        public override NewProtos.InMessage GetNewShiftToOldJitInstance()
        {
            NewProtos.InMessage newprotocol = new();
            newprotocol.InStr = "miHomo Technology Presents";
            newprotocol.Code = 20231024;
            return newprotocol;
        }
            
        [System.Diagnostics.DebuggerNonUserCode]
        [System.CodeDom.Compiler.GeneratedCode("YYHEggEgg/csharp_Protoshift.HandlerGenerator", "1.0.0.0")]
        public override void RunJit()
        {
            var instance = GetNewShiftToOldJitInstance();
            OldShiftToNew(NewShiftToOld(instance.ToByteArray()));
            OldShiftToNew(new Span<byte>(NewShiftToOld(new Span<byte>(instance.ToByteArray())).ToByteArray()));
            OldShiftToNew(NewShiftToOld(instance.ToByteString()));
        }
        #endregion
        #endregion

        #region Outer bytes invoke
        public override byte[] NewShiftToOld(byte[] arr, int offset, int length)
        {
            var rtn = NewShiftToOld(newproto_parser_base.ParseFrom(arr, offset, length));
            return rtn == null ? Array.Empty<byte>() : rtn.ToByteArray();
        }
        public override IMessage? NewShiftToOld(ReadOnlySpan<byte> span)
        {
            var rtn = NewShiftToOld(newproto_parser_base.ParseFrom(span));
            return rtn;
        }
        public override ByteString NewShiftToOld(ByteString bytes)
        {
            var rtn = NewShiftToOld(newproto_parser_base.ParseFrom(bytes));
            return rtn == null ? ByteString.Empty : rtn.ToByteString();
        }
        public override byte[] OldShiftToNew(byte[] arr, int offset, int length)
        {
            var rtn = OldShiftToNew(oldproto_parser_base.ParseFrom(arr, offset, length));
            return rtn == null ? Array.Empty<byte>() : rtn.ToByteArray();
        }
        public override IMessage? OldShiftToNew(ReadOnlySpan<byte> span)
        {
            var rtn = OldShiftToNew(oldproto_parser_base.ParseFrom(span));
            return rtn;
        }
        public override ByteString OldShiftToNew(ByteString bytes)
        {
            var rtn = OldShiftToNew(oldproto_parser_base.ParseFrom(bytes));
            return rtn == null ? ByteString.Empty : rtn.ToByteString();
        }
        #endregion

        private static HandlerInMessage _globalOnlyInstance = new HandlerInMessage();
        public static HandlerInMessage GlobalInstance => _globalOnlyInstance;
    }
}
#endregion Designer generated code