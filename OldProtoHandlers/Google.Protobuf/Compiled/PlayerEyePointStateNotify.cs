// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerEyePointStateNotify.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from PlayerEyePointStateNotify.proto</summary>
public static partial class PlayerEyePointStateNotifyReflection {

  #region Descriptor
  /// <summary>File descriptor for PlayerEyePointStateNotify.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerEyePointStateNotifyReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch9QbGF5ZXJFeWVQb2ludFN0YXRlTm90aWZ5LnByb3RvGhhDeWxpbmRlclJl",
          "Z2lvblNpemUucHJvdG8aF1BvbHlnb25SZWdpb25TaXplLnByb3RvGgxWZWN0",
          "b3IucHJvdG8ikgMKGVBsYXllckV5ZVBvaW50U3RhdGVOb3RpZnkSGAoQcmVn",
          "aW9uX2VudGl0eV9pZBgPIAEoDRIeCg1leWVfcG9pbnRfcG9zGAEgASgLMgcu",
          "VmVjdG9yEhgKEGlzX3VzZV9leWVfcG9pbnQYAyABKAgSGAoQcmVnaW9uX2Nv",
          "bmZpZ19pZBgHIAEoDRIUCgxyZWdpb25fc2hhcGUYDCABKA0SHAoUaXNfZmls",
          "dGVyX3N0cmVhbV9wb3MYAiABKAgSFQoNZml4X2xvZF9sZXZlbBgFIAEoBRIX",
          "Cg9yZWdpb25fZ3JvdXBfaWQYBCABKA0SGAoNc3BoZXJlX3JhZGl1cxj/ASAB",
          "KAJIABIeCgpjdWJpY19zaXplGJ8OIAEoCzIHLlZlY3RvckgAEi0KDWN5bGlu",
          "ZGVyX3NpemUYxg4gASgLMhMuQ3lsaW5kZXJSZWdpb25TaXplSAASKwoMcG9s",
          "eWdvbl9zaXplGO0GIAEoCzISLlBvbHlnb25SZWdpb25TaXplSABCDQoLcmVn",
          "aW9uX3NpemVCHgocZW11LmdyYXNzY3V0dGVyLm5ldC5vbGRwcm90b2IGcHJv",
          "dG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CylinderRegionSizeReflection.Descriptor, global::PolygonRegionSizeReflection.Descriptor, global::VectorReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerEyePointStateNotify), global::PlayerEyePointStateNotify.Parser, new[]{ "RegionEntityId", "EyePointPos", "IsUseEyePoint", "RegionConfigId", "RegionShape", "IsFilterStreamPos", "FixLodLevel", "RegionGroupId", "SphereRadius", "CubicSize", "CylinderSize", "PolygonSize" }, new[]{ "RegionSize" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// CmdId: 3051
/// EnetChannelId: 0
/// EnetIsReliable: true
/// </summary>
public sealed partial class PlayerEyePointStateNotify : pb::IMessage<PlayerEyePointStateNotify>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PlayerEyePointStateNotify> _parser = new pb::MessageParser<PlayerEyePointStateNotify>(() => new PlayerEyePointStateNotify());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PlayerEyePointStateNotify> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerEyePointStateNotifyReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerEyePointStateNotify() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerEyePointStateNotify(PlayerEyePointStateNotify other) : this() {
    regionEntityId_ = other.regionEntityId_;
    eyePointPos_ = other.eyePointPos_ != null ? other.eyePointPos_.Clone() : null;
    isUseEyePoint_ = other.isUseEyePoint_;
    regionConfigId_ = other.regionConfigId_;
    regionShape_ = other.regionShape_;
    isFilterStreamPos_ = other.isFilterStreamPos_;
    fixLodLevel_ = other.fixLodLevel_;
    regionGroupId_ = other.regionGroupId_;
    switch (other.RegionSizeCase) {
      case RegionSizeOneofCase.SphereRadius:
        SphereRadius = other.SphereRadius;
        break;
      case RegionSizeOneofCase.CubicSize:
        CubicSize = other.CubicSize.Clone();
        break;
      case RegionSizeOneofCase.CylinderSize:
        CylinderSize = other.CylinderSize.Clone();
        break;
      case RegionSizeOneofCase.PolygonSize:
        PolygonSize = other.PolygonSize.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerEyePointStateNotify Clone() {
    return new PlayerEyePointStateNotify(this);
  }

  /// <summary>Field number for the "region_entity_id" field.</summary>
  public const int RegionEntityIdFieldNumber = 15;
  private uint regionEntityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RegionEntityId {
    get { return regionEntityId_; }
    set {
      regionEntityId_ = value;
    }
  }

  /// <summary>Field number for the "eye_point_pos" field.</summary>
  public const int EyePointPosFieldNumber = 1;
  private global::Vector eyePointPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector EyePointPos {
    get { return eyePointPos_; }
    set {
      eyePointPos_ = value;
    }
  }

  /// <summary>Field number for the "is_use_eye_point" field.</summary>
  public const int IsUseEyePointFieldNumber = 3;
  private bool isUseEyePoint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsUseEyePoint {
    get { return isUseEyePoint_; }
    set {
      isUseEyePoint_ = value;
    }
  }

  /// <summary>Field number for the "region_config_id" field.</summary>
  public const int RegionConfigIdFieldNumber = 7;
  private uint regionConfigId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RegionConfigId {
    get { return regionConfigId_; }
    set {
      regionConfigId_ = value;
    }
  }

  /// <summary>Field number for the "region_shape" field.</summary>
  public const int RegionShapeFieldNumber = 12;
  private uint regionShape_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RegionShape {
    get { return regionShape_; }
    set {
      regionShape_ = value;
    }
  }

  /// <summary>Field number for the "is_filter_stream_pos" field.</summary>
  public const int IsFilterStreamPosFieldNumber = 2;
  private bool isFilterStreamPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsFilterStreamPos {
    get { return isFilterStreamPos_; }
    set {
      isFilterStreamPos_ = value;
    }
  }

  /// <summary>Field number for the "fix_lod_level" field.</summary>
  public const int FixLodLevelFieldNumber = 5;
  private int fixLodLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FixLodLevel {
    get { return fixLodLevel_; }
    set {
      fixLodLevel_ = value;
    }
  }

  /// <summary>Field number for the "region_group_id" field.</summary>
  public const int RegionGroupIdFieldNumber = 4;
  private uint regionGroupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RegionGroupId {
    get { return regionGroupId_; }
    set {
      regionGroupId_ = value;
    }
  }

  /// <summary>Field number for the "sphere_radius" field.</summary>
  public const int SphereRadiusFieldNumber = 255;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float SphereRadius {
    get { return regionSizeCase_ == RegionSizeOneofCase.SphereRadius ? (float) regionSize_ : 0F; }
    set {
      regionSize_ = value;
      regionSizeCase_ = RegionSizeOneofCase.SphereRadius;
    }
  }

  /// <summary>Field number for the "cubic_size" field.</summary>
  public const int CubicSizeFieldNumber = 1823;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector CubicSize {
    get { return regionSizeCase_ == RegionSizeOneofCase.CubicSize ? (global::Vector) regionSize_ : null; }
    set {
      regionSize_ = value;
      regionSizeCase_ = value == null ? RegionSizeOneofCase.None : RegionSizeOneofCase.CubicSize;
    }
  }

  /// <summary>Field number for the "cylinder_size" field.</summary>
  public const int CylinderSizeFieldNumber = 1862;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::CylinderRegionSize CylinderSize {
    get { return regionSizeCase_ == RegionSizeOneofCase.CylinderSize ? (global::CylinderRegionSize) regionSize_ : null; }
    set {
      regionSize_ = value;
      regionSizeCase_ = value == null ? RegionSizeOneofCase.None : RegionSizeOneofCase.CylinderSize;
    }
  }

  /// <summary>Field number for the "polygon_size" field.</summary>
  public const int PolygonSizeFieldNumber = 877;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PolygonRegionSize PolygonSize {
    get { return regionSizeCase_ == RegionSizeOneofCase.PolygonSize ? (global::PolygonRegionSize) regionSize_ : null; }
    set {
      regionSize_ = value;
      regionSizeCase_ = value == null ? RegionSizeOneofCase.None : RegionSizeOneofCase.PolygonSize;
    }
  }

  private object regionSize_;
  /// <summary>Enum of possible cases for the "region_size" oneof.</summary>
  public enum RegionSizeOneofCase {
    None = 0,
    SphereRadius = 255,
    CubicSize = 1823,
    CylinderSize = 1862,
    PolygonSize = 877,
  }
  private RegionSizeOneofCase regionSizeCase_ = RegionSizeOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RegionSizeOneofCase RegionSizeCase {
    get { return regionSizeCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegionSize() {
    regionSizeCase_ = RegionSizeOneofCase.None;
    regionSize_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PlayerEyePointStateNotify);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PlayerEyePointStateNotify other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RegionEntityId != other.RegionEntityId) return false;
    if (!object.Equals(EyePointPos, other.EyePointPos)) return false;
    if (IsUseEyePoint != other.IsUseEyePoint) return false;
    if (RegionConfigId != other.RegionConfigId) return false;
    if (RegionShape != other.RegionShape) return false;
    if (IsFilterStreamPos != other.IsFilterStreamPos) return false;
    if (FixLodLevel != other.FixLodLevel) return false;
    if (RegionGroupId != other.RegionGroupId) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SphereRadius, other.SphereRadius)) return false;
    if (!object.Equals(CubicSize, other.CubicSize)) return false;
    if (!object.Equals(CylinderSize, other.CylinderSize)) return false;
    if (!object.Equals(PolygonSize, other.PolygonSize)) return false;
    if (RegionSizeCase != other.RegionSizeCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (RegionEntityId != 0) hash ^= RegionEntityId.GetHashCode();
    if (eyePointPos_ != null) hash ^= EyePointPos.GetHashCode();
    if (IsUseEyePoint != false) hash ^= IsUseEyePoint.GetHashCode();
    if (RegionConfigId != 0) hash ^= RegionConfigId.GetHashCode();
    if (RegionShape != 0) hash ^= RegionShape.GetHashCode();
    if (IsFilterStreamPos != false) hash ^= IsFilterStreamPos.GetHashCode();
    if (FixLodLevel != 0) hash ^= FixLodLevel.GetHashCode();
    if (RegionGroupId != 0) hash ^= RegionGroupId.GetHashCode();
    if (regionSizeCase_ == RegionSizeOneofCase.SphereRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SphereRadius);
    if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) hash ^= CubicSize.GetHashCode();
    if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) hash ^= CylinderSize.GetHashCode();
    if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) hash ^= PolygonSize.GetHashCode();
    hash ^= (int) regionSizeCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (eyePointPos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EyePointPos);
    }
    if (IsFilterStreamPos != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsFilterStreamPos);
    }
    if (IsUseEyePoint != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsUseEyePoint);
    }
    if (RegionGroupId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(RegionGroupId);
    }
    if (FixLodLevel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(FixLodLevel);
    }
    if (RegionConfigId != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(RegionConfigId);
    }
    if (RegionShape != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(RegionShape);
    }
    if (RegionEntityId != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(RegionEntityId);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.SphereRadius) {
      output.WriteRawTag(253, 15);
      output.WriteFloat(SphereRadius);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) {
      output.WriteRawTag(234, 54);
      output.WriteMessage(PolygonSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) {
      output.WriteRawTag(250, 113);
      output.WriteMessage(CubicSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) {
      output.WriteRawTag(178, 116);
      output.WriteMessage(CylinderSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (eyePointPos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EyePointPos);
    }
    if (IsFilterStreamPos != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsFilterStreamPos);
    }
    if (IsUseEyePoint != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsUseEyePoint);
    }
    if (RegionGroupId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(RegionGroupId);
    }
    if (FixLodLevel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(FixLodLevel);
    }
    if (RegionConfigId != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(RegionConfigId);
    }
    if (RegionShape != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(RegionShape);
    }
    if (RegionEntityId != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(RegionEntityId);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.SphereRadius) {
      output.WriteRawTag(253, 15);
      output.WriteFloat(SphereRadius);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) {
      output.WriteRawTag(234, 54);
      output.WriteMessage(PolygonSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) {
      output.WriteRawTag(250, 113);
      output.WriteMessage(CubicSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) {
      output.WriteRawTag(178, 116);
      output.WriteMessage(CylinderSize);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (RegionEntityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionEntityId);
    }
    if (eyePointPos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EyePointPos);
    }
    if (IsUseEyePoint != false) {
      size += 1 + 1;
    }
    if (RegionConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionConfigId);
    }
    if (RegionShape != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionShape);
    }
    if (IsFilterStreamPos != false) {
      size += 1 + 1;
    }
    if (FixLodLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FixLodLevel);
    }
    if (RegionGroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RegionGroupId);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.SphereRadius) {
      size += 2 + 4;
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(CubicSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(CylinderSize);
    }
    if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PolygonSize);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PlayerEyePointStateNotify other) {
    if (other == null) {
      return;
    }
    if (other.RegionEntityId != 0) {
      RegionEntityId = other.RegionEntityId;
    }
    if (other.eyePointPos_ != null) {
      if (eyePointPos_ == null) {
        EyePointPos = new global::Vector();
      }
      EyePointPos.MergeFrom(other.EyePointPos);
    }
    if (other.IsUseEyePoint != false) {
      IsUseEyePoint = other.IsUseEyePoint;
    }
    if (other.RegionConfigId != 0) {
      RegionConfigId = other.RegionConfigId;
    }
    if (other.RegionShape != 0) {
      RegionShape = other.RegionShape;
    }
    if (other.IsFilterStreamPos != false) {
      IsFilterStreamPos = other.IsFilterStreamPos;
    }
    if (other.FixLodLevel != 0) {
      FixLodLevel = other.FixLodLevel;
    }
    if (other.RegionGroupId != 0) {
      RegionGroupId = other.RegionGroupId;
    }
    switch (other.RegionSizeCase) {
      case RegionSizeOneofCase.SphereRadius:
        SphereRadius = other.SphereRadius;
        break;
      case RegionSizeOneofCase.CubicSize:
        if (CubicSize == null) {
          CubicSize = new global::Vector();
        }
        CubicSize.MergeFrom(other.CubicSize);
        break;
      case RegionSizeOneofCase.CylinderSize:
        if (CylinderSize == null) {
          CylinderSize = new global::CylinderRegionSize();
        }
        CylinderSize.MergeFrom(other.CylinderSize);
        break;
      case RegionSizeOneofCase.PolygonSize:
        if (PolygonSize == null) {
          PolygonSize = new global::PolygonRegionSize();
        }
        PolygonSize.MergeFrom(other.PolygonSize);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (eyePointPos_ == null) {
            EyePointPos = new global::Vector();
          }
          input.ReadMessage(EyePointPos);
          break;
        }
        case 16: {
          IsFilterStreamPos = input.ReadBool();
          break;
        }
        case 24: {
          IsUseEyePoint = input.ReadBool();
          break;
        }
        case 32: {
          RegionGroupId = input.ReadUInt32();
          break;
        }
        case 40: {
          FixLodLevel = input.ReadInt32();
          break;
        }
        case 56: {
          RegionConfigId = input.ReadUInt32();
          break;
        }
        case 96: {
          RegionShape = input.ReadUInt32();
          break;
        }
        case 120: {
          RegionEntityId = input.ReadUInt32();
          break;
        }
        case 2045: {
          SphereRadius = input.ReadFloat();
          break;
        }
        case 7018: {
          global::PolygonRegionSize subBuilder = new global::PolygonRegionSize();
          if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) {
            subBuilder.MergeFrom(PolygonSize);
          }
          input.ReadMessage(subBuilder);
          PolygonSize = subBuilder;
          break;
        }
        case 14586: {
          global::Vector subBuilder = new global::Vector();
          if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) {
            subBuilder.MergeFrom(CubicSize);
          }
          input.ReadMessage(subBuilder);
          CubicSize = subBuilder;
          break;
        }
        case 14898: {
          global::CylinderRegionSize subBuilder = new global::CylinderRegionSize();
          if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) {
            subBuilder.MergeFrom(CylinderSize);
          }
          input.ReadMessage(subBuilder);
          CylinderSize = subBuilder;
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          if (eyePointPos_ == null) {
            EyePointPos = new global::Vector();
          }
          input.ReadMessage(EyePointPos);
          break;
        }
        case 16: {
          IsFilterStreamPos = input.ReadBool();
          break;
        }
        case 24: {
          IsUseEyePoint = input.ReadBool();
          break;
        }
        case 32: {
          RegionGroupId = input.ReadUInt32();
          break;
        }
        case 40: {
          FixLodLevel = input.ReadInt32();
          break;
        }
        case 56: {
          RegionConfigId = input.ReadUInt32();
          break;
        }
        case 96: {
          RegionShape = input.ReadUInt32();
          break;
        }
        case 120: {
          RegionEntityId = input.ReadUInt32();
          break;
        }
        case 2045: {
          SphereRadius = input.ReadFloat();
          break;
        }
        case 7018: {
          global::PolygonRegionSize subBuilder = new global::PolygonRegionSize();
          if (regionSizeCase_ == RegionSizeOneofCase.PolygonSize) {
            subBuilder.MergeFrom(PolygonSize);
          }
          input.ReadMessage(subBuilder);
          PolygonSize = subBuilder;
          break;
        }
        case 14586: {
          global::Vector subBuilder = new global::Vector();
          if (regionSizeCase_ == RegionSizeOneofCase.CubicSize) {
            subBuilder.MergeFrom(CubicSize);
          }
          input.ReadMessage(subBuilder);
          CubicSize = subBuilder;
          break;
        }
        case 14898: {
          global::CylinderRegionSize subBuilder = new global::CylinderRegionSize();
          if (regionSizeCase_ == RegionSizeOneofCase.CylinderSize) {
            subBuilder.MergeFrom(CylinderSize);
          }
          input.ReadMessage(subBuilder);
          CylinderSize = subBuilder;
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
