// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerLoginRsp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from PlayerLoginRsp.proto</summary>
public static partial class PlayerLoginRspReflection {

  #region Descriptor
  /// <summary>File descriptor for PlayerLoginRsp.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerLoginRspReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRQbGF5ZXJMb2dpblJzcC5wcm90bxoPQmxvY2tJbmZvLnByb3RvGhZGZWF0",
          "dXJlQmxvY2tJbmZvLnByb3RvGhZSZXNWZXJzaW9uQ29uZmlnLnByb3RvGhpT",
          "aG9ydEFiaWxpdHlIYXNoUGFpci5wcm90byK5CQoOUGxheWVyTG9naW5Sc3AS",
          "GwoTY2xpZW50X2RhdGFfdmVyc2lvbhgBIAEoDRITCgppc19zY19vcGVuGJUL",
          "IAEoCBIPCgdyZXRjb2RlGA8gASgFEjoKDmJsb2NrX2luZm9fbWFwGLsEIAMo",
          "CzIhLlBsYXllckxvZ2luUnNwLkJsb2NrSW5mb01hcEVudHJ5EhEKCGlzX2F1",
          "ZGl0GJUNIAEoCBIUCgtpc190cmFuc2ZlchjiDyABKAgSGwoSY2xpZW50X3Np",
          "bGVuY2VfbWQ1GNINIAEoCRIzChduZXh0X3Jlc192ZXJzaW9uX2NvbmZpZxil",
          "DCABKAsyES5SZXNWZXJzaW9uQ29uZmlnEiMKG2NsaWVudF9zaWxlbmNlX2Rh",
          "dGFfdmVyc2lvbhgGIAEoDRISCgpsb2dpbl9yYW5kGAQgASgEEhUKDWlzX25l",
          "d19wbGF5ZXIYCCABKAgSHgoVY2xpZW50X3ZlcnNpb25fc3VmZml4GJcIIAEo",
          "CRIQCghnYW1lX2JpehgFIAEoCRIaChFuZXh0X3Jlc291cmNlX3VybBjtBCAB",
          "KAkSEgoKaXNfcmVsb2dpbhgKIAEoCBIXCg90b3RhbF90aWNrX3RpbWUYfSAB",
          "KAESJAobaXNfZW5hYmxlX2NsaWVudF9oYXNoX2RlYnVnGKQHIAEoCBIQCgdz",
          "Y19pbmZvGOgPIAEoDBIZChFhYmlsaXR5X2hhc2hfY29kZRgMIAEoBRIVCgxy",
          "ZWdpc3Rlcl9jcHMY+A8gASgJEhsKEmlzX2xvZ2luX3JzcF9zcGxpdBjxDCAB",
          "KAgSGwoTaXNfdXNlX2FiaWxpdHlfaGFzaBgCIAEoCBI9ChBhYmlsaXR5X2hh",
          "c2hfbWFwGAsgAygLMiMuUGxheWVyTG9naW5Sc3AuQWJpbGl0eUhhc2hNYXBF",
          "bnRyeRI2ChZzaG9ydF9hYmlsaXR5X2hhc2hfbWFwGPoBIAMoCzIVLlNob3J0",
          "QWJpbGl0eUhhc2hQYWlyEhMKCmNsaWVudF9tZDUYpg4gASgJEhUKDGNvdW50",
          "cnlfY29kZRjsDiABKAkSHQoUaXNfZGF0YV9uZWVkX3JlbG9naW4YtwcgASgI",
          "Ei4KEnJlc192ZXJzaW9uX2NvbmZpZxixDyABKAsyES5SZXNWZXJzaW9uQ29u",
          "ZmlnEjMKF2ZlYXR1cmVfYmxvY2tfaW5mb19saXN0GMgKIAMoCzIRLkZlYXR1",
          "cmVCbG9ja0luZm8SEQoIYmlydGhkYXkY8AQgASgJEhIKCnRhcmdldF91aWQY",
          "DiABKA0SEwoLcGxheWVyX2RhdGEYDSABKAwSJgodY2xpZW50X3NpbGVuY2Vf",
          "dmVyc2lvbl9zdWZmaXgYkwogASgJEh4KFXRhcmdldF9ob21lX293bmVyX3Vp",
          "ZBipBCABKA0SGwoTcGxheWVyX2RhdGFfdmVyc2lvbhgHIAEoDRo/ChFCbG9j",
          "a0luZm9NYXBFbnRyeRILCgNrZXkYASABKA0SGQoFdmFsdWUYAiABKAsyCi5C",
          "bG9ja0luZm86AjgBGjUKE0FiaWxpdHlIYXNoTWFwRW50cnkSCwoDa2V5GAEg",
          "ASgJEg0KBXZhbHVlGAIgASgFOgI4AUIeChxlbXUuZ3Jhc3NjdXR0ZXIubmV0",
          "Lm9sZHByb3RvYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BlockInfoReflection.Descriptor, global::FeatureBlockInfoReflection.Descriptor, global::ResVersionConfigReflection.Descriptor, global::ShortAbilityHashPairReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerLoginRsp), global::PlayerLoginRsp.Parser, new[]{ "ClientDataVersion", "IsScOpen", "Retcode", "BlockInfoMap", "IsAudit", "IsTransfer", "ClientSilenceMd5", "NextResVersionConfig", "ClientSilenceDataVersion", "LoginRand", "IsNewPlayer", "ClientVersionSuffix", "GameBiz", "NextResourceUrl", "IsRelogin", "TotalTickTime", "IsEnableClientHashDebug", "ScInfo", "AbilityHashCode", "RegisterCps", "IsLoginRspSplit", "IsUseAbilityHash", "AbilityHashMap", "ShortAbilityHashMap", "ClientMd5", "CountryCode", "IsDataNeedRelogin", "ResVersionConfig", "FeatureBlockInfoList", "Birthday", "TargetUid", "PlayerData", "ClientSilenceVersionSuffix", "TargetHomeOwnerUid", "PlayerDataVersion" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// CmdId: 135
/// EnetChannelId: 0
/// EnetIsReliable: true
/// </summary>
public sealed partial class PlayerLoginRsp : pb::IMessage<PlayerLoginRsp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PlayerLoginRsp> _parser = new pb::MessageParser<PlayerLoginRsp>(() => new PlayerLoginRsp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PlayerLoginRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerLoginRspReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerLoginRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerLoginRsp(PlayerLoginRsp other) : this() {
    clientDataVersion_ = other.clientDataVersion_;
    isScOpen_ = other.isScOpen_;
    retcode_ = other.retcode_;
    blockInfoMap_ = other.blockInfoMap_.Clone();
    isAudit_ = other.isAudit_;
    isTransfer_ = other.isTransfer_;
    clientSilenceMd5_ = other.clientSilenceMd5_;
    nextResVersionConfig_ = other.nextResVersionConfig_ != null ? other.nextResVersionConfig_.Clone() : null;
    clientSilenceDataVersion_ = other.clientSilenceDataVersion_;
    loginRand_ = other.loginRand_;
    isNewPlayer_ = other.isNewPlayer_;
    clientVersionSuffix_ = other.clientVersionSuffix_;
    gameBiz_ = other.gameBiz_;
    nextResourceUrl_ = other.nextResourceUrl_;
    isRelogin_ = other.isRelogin_;
    totalTickTime_ = other.totalTickTime_;
    isEnableClientHashDebug_ = other.isEnableClientHashDebug_;
    scInfo_ = other.scInfo_;
    abilityHashCode_ = other.abilityHashCode_;
    registerCps_ = other.registerCps_;
    isLoginRspSplit_ = other.isLoginRspSplit_;
    isUseAbilityHash_ = other.isUseAbilityHash_;
    abilityHashMap_ = other.abilityHashMap_.Clone();
    shortAbilityHashMap_ = other.shortAbilityHashMap_.Clone();
    clientMd5_ = other.clientMd5_;
    countryCode_ = other.countryCode_;
    isDataNeedRelogin_ = other.isDataNeedRelogin_;
    resVersionConfig_ = other.resVersionConfig_ != null ? other.resVersionConfig_.Clone() : null;
    featureBlockInfoList_ = other.featureBlockInfoList_.Clone();
    birthday_ = other.birthday_;
    targetUid_ = other.targetUid_;
    playerData_ = other.playerData_;
    clientSilenceVersionSuffix_ = other.clientSilenceVersionSuffix_;
    targetHomeOwnerUid_ = other.targetHomeOwnerUid_;
    playerDataVersion_ = other.playerDataVersion_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PlayerLoginRsp Clone() {
    return new PlayerLoginRsp(this);
  }

  /// <summary>Field number for the "client_data_version" field.</summary>
  public const int ClientDataVersionFieldNumber = 1;
  private uint clientDataVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientDataVersion {
    get { return clientDataVersion_; }
    set {
      clientDataVersion_ = value;
    }
  }

  /// <summary>Field number for the "is_sc_open" field.</summary>
  public const int IsScOpenFieldNumber = 1429;
  private bool isScOpen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsScOpen {
    get { return isScOpen_; }
    set {
      isScOpen_ = value;
    }
  }

  /// <summary>Field number for the "retcode" field.</summary>
  public const int RetcodeFieldNumber = 15;
  private int retcode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Retcode {
    get { return retcode_; }
    set {
      retcode_ = value;
    }
  }

  /// <summary>Field number for the "block_info_map" field.</summary>
  public const int BlockInfoMapFieldNumber = 571;
  private static readonly pbc::MapField<uint, global::BlockInfo>.Codec _map_blockInfoMap_codec
      = new pbc::MapField<uint, global::BlockInfo>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::BlockInfo.Parser), 4570);
  private readonly pbc::MapField<uint, global::BlockInfo> blockInfoMap_ = new pbc::MapField<uint, global::BlockInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<uint, global::BlockInfo> BlockInfoMap {
    get { return blockInfoMap_; }
  }

  /// <summary>Field number for the "is_audit" field.</summary>
  public const int IsAuditFieldNumber = 1685;
  private bool isAudit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAudit {
    get { return isAudit_; }
    set {
      isAudit_ = value;
    }
  }

  /// <summary>Field number for the "is_transfer" field.</summary>
  public const int IsTransferFieldNumber = 2018;
  private bool isTransfer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsTransfer {
    get { return isTransfer_; }
    set {
      isTransfer_ = value;
    }
  }

  /// <summary>Field number for the "client_silence_md5" field.</summary>
  public const int ClientSilenceMd5FieldNumber = 1746;
  private string clientSilenceMd5_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientSilenceMd5 {
    get { return clientSilenceMd5_; }
    set {
      clientSilenceMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "next_res_version_config" field.</summary>
  public const int NextResVersionConfigFieldNumber = 1573;
  private global::ResVersionConfig nextResVersionConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ResVersionConfig NextResVersionConfig {
    get { return nextResVersionConfig_; }
    set {
      nextResVersionConfig_ = value;
    }
  }

  /// <summary>Field number for the "client_silence_data_version" field.</summary>
  public const int ClientSilenceDataVersionFieldNumber = 6;
  private uint clientSilenceDataVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ClientSilenceDataVersion {
    get { return clientSilenceDataVersion_; }
    set {
      clientSilenceDataVersion_ = value;
    }
  }

  /// <summary>Field number for the "login_rand" field.</summary>
  public const int LoginRandFieldNumber = 4;
  private ulong loginRand_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong LoginRand {
    get { return loginRand_; }
    set {
      loginRand_ = value;
    }
  }

  /// <summary>Field number for the "is_new_player" field.</summary>
  public const int IsNewPlayerFieldNumber = 8;
  private bool isNewPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsNewPlayer {
    get { return isNewPlayer_; }
    set {
      isNewPlayer_ = value;
    }
  }

  /// <summary>Field number for the "client_version_suffix" field.</summary>
  public const int ClientVersionSuffixFieldNumber = 1047;
  private string clientVersionSuffix_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientVersionSuffix {
    get { return clientVersionSuffix_; }
    set {
      clientVersionSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "game_biz" field.</summary>
  public const int GameBizFieldNumber = 5;
  private string gameBiz_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GameBiz {
    get { return gameBiz_; }
    set {
      gameBiz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "next_resource_url" field.</summary>
  public const int NextResourceUrlFieldNumber = 621;
  private string nextResourceUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string NextResourceUrl {
    get { return nextResourceUrl_; }
    set {
      nextResourceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_relogin" field.</summary>
  public const int IsReloginFieldNumber = 10;
  private bool isRelogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRelogin {
    get { return isRelogin_; }
    set {
      isRelogin_ = value;
    }
  }

  /// <summary>Field number for the "total_tick_time" field.</summary>
  public const int TotalTickTimeFieldNumber = 125;
  private double totalTickTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TotalTickTime {
    get { return totalTickTime_; }
    set {
      totalTickTime_ = value;
    }
  }

  /// <summary>Field number for the "is_enable_client_hash_debug" field.</summary>
  public const int IsEnableClientHashDebugFieldNumber = 932;
  private bool isEnableClientHashDebug_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsEnableClientHashDebug {
    get { return isEnableClientHashDebug_; }
    set {
      isEnableClientHashDebug_ = value;
    }
  }

  /// <summary>Field number for the "sc_info" field.</summary>
  public const int ScInfoFieldNumber = 2024;
  private pb::ByteString scInfo_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString ScInfo {
    get { return scInfo_; }
    set {
      scInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ability_hash_code" field.</summary>
  public const int AbilityHashCodeFieldNumber = 12;
  private int abilityHashCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AbilityHashCode {
    get { return abilityHashCode_; }
    set {
      abilityHashCode_ = value;
    }
  }

  /// <summary>Field number for the "register_cps" field.</summary>
  public const int RegisterCpsFieldNumber = 2040;
  private string registerCps_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RegisterCps {
    get { return registerCps_; }
    set {
      registerCps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_login_rsp_split" field.</summary>
  public const int IsLoginRspSplitFieldNumber = 1649;
  private bool isLoginRspSplit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLoginRspSplit {
    get { return isLoginRspSplit_; }
    set {
      isLoginRspSplit_ = value;
    }
  }

  /// <summary>Field number for the "is_use_ability_hash" field.</summary>
  public const int IsUseAbilityHashFieldNumber = 2;
  private bool isUseAbilityHash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsUseAbilityHash {
    get { return isUseAbilityHash_; }
    set {
      isUseAbilityHash_ = value;
    }
  }

  /// <summary>Field number for the "ability_hash_map" field.</summary>
  public const int AbilityHashMapFieldNumber = 11;
  private static readonly pbc::MapField<string, int>.Codec _map_abilityHashMap_codec
      = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 90);
  private readonly pbc::MapField<string, int> abilityHashMap_ = new pbc::MapField<string, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::MapField<string, int> AbilityHashMap {
    get { return abilityHashMap_; }
  }

  /// <summary>Field number for the "short_ability_hash_map" field.</summary>
  public const int ShortAbilityHashMapFieldNumber = 250;
  private static readonly pb::FieldCodec<global::ShortAbilityHashPair> _repeated_shortAbilityHashMap_codec
      = pb::FieldCodec.ForMessage(2002, global::ShortAbilityHashPair.Parser);
  private readonly pbc::RepeatedField<global::ShortAbilityHashPair> shortAbilityHashMap_ = new pbc::RepeatedField<global::ShortAbilityHashPair>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ShortAbilityHashPair> ShortAbilityHashMap {
    get { return shortAbilityHashMap_; }
  }

  /// <summary>Field number for the "client_md5" field.</summary>
  public const int ClientMd5FieldNumber = 1830;
  private string clientMd5_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientMd5 {
    get { return clientMd5_; }
    set {
      clientMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "country_code" field.</summary>
  public const int CountryCodeFieldNumber = 1900;
  private string countryCode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CountryCode {
    get { return countryCode_; }
    set {
      countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_data_need_relogin" field.</summary>
  public const int IsDataNeedReloginFieldNumber = 951;
  private bool isDataNeedRelogin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDataNeedRelogin {
    get { return isDataNeedRelogin_; }
    set {
      isDataNeedRelogin_ = value;
    }
  }

  /// <summary>Field number for the "res_version_config" field.</summary>
  public const int ResVersionConfigFieldNumber = 1969;
  private global::ResVersionConfig resVersionConfig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ResVersionConfig ResVersionConfig {
    get { return resVersionConfig_; }
    set {
      resVersionConfig_ = value;
    }
  }

  /// <summary>Field number for the "feature_block_info_list" field.</summary>
  public const int FeatureBlockInfoListFieldNumber = 1352;
  private static readonly pb::FieldCodec<global::FeatureBlockInfo> _repeated_featureBlockInfoList_codec
      = pb::FieldCodec.ForMessage(10818, global::FeatureBlockInfo.Parser);
  private readonly pbc::RepeatedField<global::FeatureBlockInfo> featureBlockInfoList_ = new pbc::RepeatedField<global::FeatureBlockInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::FeatureBlockInfo> FeatureBlockInfoList {
    get { return featureBlockInfoList_; }
  }

  /// <summary>Field number for the "birthday" field.</summary>
  public const int BirthdayFieldNumber = 624;
  private string birthday_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Birthday {
    get { return birthday_; }
    set {
      birthday_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target_uid" field.</summary>
  public const int TargetUidFieldNumber = 14;
  private uint targetUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TargetUid {
    get { return targetUid_; }
    set {
      targetUid_ = value;
    }
  }

  /// <summary>Field number for the "player_data" field.</summary>
  public const int PlayerDataFieldNumber = 13;
  private pb::ByteString playerData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pb::ByteString PlayerData {
    get { return playerData_; }
    set {
      playerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "client_silence_version_suffix" field.</summary>
  public const int ClientSilenceVersionSuffixFieldNumber = 1299;
  private string clientSilenceVersionSuffix_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientSilenceVersionSuffix {
    get { return clientSilenceVersionSuffix_; }
    set {
      clientSilenceVersionSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "target_home_owner_uid" field.</summary>
  public const int TargetHomeOwnerUidFieldNumber = 553;
  private uint targetHomeOwnerUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TargetHomeOwnerUid {
    get { return targetHomeOwnerUid_; }
    set {
      targetHomeOwnerUid_ = value;
    }
  }

  /// <summary>Field number for the "player_data_version" field.</summary>
  public const int PlayerDataVersionFieldNumber = 7;
  private uint playerDataVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PlayerDataVersion {
    get { return playerDataVersion_; }
    set {
      playerDataVersion_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PlayerLoginRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PlayerLoginRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientDataVersion != other.ClientDataVersion) return false;
    if (IsScOpen != other.IsScOpen) return false;
    if (Retcode != other.Retcode) return false;
    if (!BlockInfoMap.Equals(other.BlockInfoMap)) return false;
    if (IsAudit != other.IsAudit) return false;
    if (IsTransfer != other.IsTransfer) return false;
    if (ClientSilenceMd5 != other.ClientSilenceMd5) return false;
    if (!object.Equals(NextResVersionConfig, other.NextResVersionConfig)) return false;
    if (ClientSilenceDataVersion != other.ClientSilenceDataVersion) return false;
    if (LoginRand != other.LoginRand) return false;
    if (IsNewPlayer != other.IsNewPlayer) return false;
    if (ClientVersionSuffix != other.ClientVersionSuffix) return false;
    if (GameBiz != other.GameBiz) return false;
    if (NextResourceUrl != other.NextResourceUrl) return false;
    if (IsRelogin != other.IsRelogin) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalTickTime, other.TotalTickTime)) return false;
    if (IsEnableClientHashDebug != other.IsEnableClientHashDebug) return false;
    if (ScInfo != other.ScInfo) return false;
    if (AbilityHashCode != other.AbilityHashCode) return false;
    if (RegisterCps != other.RegisterCps) return false;
    if (IsLoginRspSplit != other.IsLoginRspSplit) return false;
    if (IsUseAbilityHash != other.IsUseAbilityHash) return false;
    if (!AbilityHashMap.Equals(other.AbilityHashMap)) return false;
    if(!shortAbilityHashMap_.Equals(other.shortAbilityHashMap_)) return false;
    if (ClientMd5 != other.ClientMd5) return false;
    if (CountryCode != other.CountryCode) return false;
    if (IsDataNeedRelogin != other.IsDataNeedRelogin) return false;
    if (!object.Equals(ResVersionConfig, other.ResVersionConfig)) return false;
    if(!featureBlockInfoList_.Equals(other.featureBlockInfoList_)) return false;
    if (Birthday != other.Birthday) return false;
    if (TargetUid != other.TargetUid) return false;
    if (PlayerData != other.PlayerData) return false;
    if (ClientSilenceVersionSuffix != other.ClientSilenceVersionSuffix) return false;
    if (TargetHomeOwnerUid != other.TargetHomeOwnerUid) return false;
    if (PlayerDataVersion != other.PlayerDataVersion) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (ClientDataVersion != 0) hash ^= ClientDataVersion.GetHashCode();
    if (IsScOpen != false) hash ^= IsScOpen.GetHashCode();
    if (Retcode != 0) hash ^= Retcode.GetHashCode();
    hash ^= BlockInfoMap.GetHashCode();
    if (IsAudit != false) hash ^= IsAudit.GetHashCode();
    if (IsTransfer != false) hash ^= IsTransfer.GetHashCode();
    if (ClientSilenceMd5.Length != 0) hash ^= ClientSilenceMd5.GetHashCode();
    if (nextResVersionConfig_ != null) hash ^= NextResVersionConfig.GetHashCode();
    if (ClientSilenceDataVersion != 0) hash ^= ClientSilenceDataVersion.GetHashCode();
    if (LoginRand != 0UL) hash ^= LoginRand.GetHashCode();
    if (IsNewPlayer != false) hash ^= IsNewPlayer.GetHashCode();
    if (ClientVersionSuffix.Length != 0) hash ^= ClientVersionSuffix.GetHashCode();
    if (GameBiz.Length != 0) hash ^= GameBiz.GetHashCode();
    if (NextResourceUrl.Length != 0) hash ^= NextResourceUrl.GetHashCode();
    if (IsRelogin != false) hash ^= IsRelogin.GetHashCode();
    if (TotalTickTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalTickTime);
    if (IsEnableClientHashDebug != false) hash ^= IsEnableClientHashDebug.GetHashCode();
    if (ScInfo.Length != 0) hash ^= ScInfo.GetHashCode();
    if (AbilityHashCode != 0) hash ^= AbilityHashCode.GetHashCode();
    if (RegisterCps.Length != 0) hash ^= RegisterCps.GetHashCode();
    if (IsLoginRspSplit != false) hash ^= IsLoginRspSplit.GetHashCode();
    if (IsUseAbilityHash != false) hash ^= IsUseAbilityHash.GetHashCode();
    hash ^= AbilityHashMap.GetHashCode();
    hash ^= shortAbilityHashMap_.GetHashCode();
    if (ClientMd5.Length != 0) hash ^= ClientMd5.GetHashCode();
    if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
    if (IsDataNeedRelogin != false) hash ^= IsDataNeedRelogin.GetHashCode();
    if (resVersionConfig_ != null) hash ^= ResVersionConfig.GetHashCode();
    hash ^= featureBlockInfoList_.GetHashCode();
    if (Birthday.Length != 0) hash ^= Birthday.GetHashCode();
    if (TargetUid != 0) hash ^= TargetUid.GetHashCode();
    if (PlayerData.Length != 0) hash ^= PlayerData.GetHashCode();
    if (ClientSilenceVersionSuffix.Length != 0) hash ^= ClientSilenceVersionSuffix.GetHashCode();
    if (TargetHomeOwnerUid != 0) hash ^= TargetHomeOwnerUid.GetHashCode();
    if (PlayerDataVersion != 0) hash ^= PlayerDataVersion.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ClientDataVersion != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClientDataVersion);
    }
    if (IsUseAbilityHash != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsUseAbilityHash);
    }
    if (LoginRand != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(LoginRand);
    }
    if (GameBiz.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(GameBiz);
    }
    if (ClientSilenceDataVersion != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ClientSilenceDataVersion);
    }
    if (PlayerDataVersion != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(PlayerDataVersion);
    }
    if (IsNewPlayer != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsNewPlayer);
    }
    if (IsRelogin != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsRelogin);
    }
    abilityHashMap_.WriteTo(output, _map_abilityHashMap_codec);
    if (AbilityHashCode != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(AbilityHashCode);
    }
    if (PlayerData.Length != 0) {
      output.WriteRawTag(106);
      output.WriteBytes(PlayerData);
    }
    if (TargetUid != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(TargetUid);
    }
    if (Retcode != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Retcode);
    }
    if (TotalTickTime != 0D) {
      output.WriteRawTag(233, 7);
      output.WriteDouble(TotalTickTime);
    }
    shortAbilityHashMap_.WriteTo(output, _repeated_shortAbilityHashMap_codec);
    if (TargetHomeOwnerUid != 0) {
      output.WriteRawTag(200, 34);
      output.WriteUInt32(TargetHomeOwnerUid);
    }
    blockInfoMap_.WriteTo(output, _map_blockInfoMap_codec);
    if (NextResourceUrl.Length != 0) {
      output.WriteRawTag(234, 38);
      output.WriteString(NextResourceUrl);
    }
    if (Birthday.Length != 0) {
      output.WriteRawTag(130, 39);
      output.WriteString(Birthday);
    }
    if (IsEnableClientHashDebug != false) {
      output.WriteRawTag(160, 58);
      output.WriteBool(IsEnableClientHashDebug);
    }
    if (IsDataNeedRelogin != false) {
      output.WriteRawTag(184, 59);
      output.WriteBool(IsDataNeedRelogin);
    }
    if (ClientVersionSuffix.Length != 0) {
      output.WriteRawTag(186, 65);
      output.WriteString(ClientVersionSuffix);
    }
    if (ClientSilenceVersionSuffix.Length != 0) {
      output.WriteRawTag(154, 81);
      output.WriteString(ClientSilenceVersionSuffix);
    }
    featureBlockInfoList_.WriteTo(output, _repeated_featureBlockInfoList_codec);
    if (IsScOpen != false) {
      output.WriteRawTag(168, 89);
      output.WriteBool(IsScOpen);
    }
    if (nextResVersionConfig_ != null) {
      output.WriteRawTag(170, 98);
      output.WriteMessage(NextResVersionConfig);
    }
    if (IsLoginRspSplit != false) {
      output.WriteRawTag(136, 103);
      output.WriteBool(IsLoginRspSplit);
    }
    if (IsAudit != false) {
      output.WriteRawTag(168, 105);
      output.WriteBool(IsAudit);
    }
    if (ClientSilenceMd5.Length != 0) {
      output.WriteRawTag(146, 109);
      output.WriteString(ClientSilenceMd5);
    }
    if (ClientMd5.Length != 0) {
      output.WriteRawTag(178, 114);
      output.WriteString(ClientMd5);
    }
    if (CountryCode.Length != 0) {
      output.WriteRawTag(226, 118);
      output.WriteString(CountryCode);
    }
    if (resVersionConfig_ != null) {
      output.WriteRawTag(138, 123);
      output.WriteMessage(ResVersionConfig);
    }
    if (IsTransfer != false) {
      output.WriteRawTag(144, 126);
      output.WriteBool(IsTransfer);
    }
    if (ScInfo.Length != 0) {
      output.WriteRawTag(194, 126);
      output.WriteBytes(ScInfo);
    }
    if (RegisterCps.Length != 0) {
      output.WriteRawTag(194, 127);
      output.WriteString(RegisterCps);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ClientDataVersion != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(ClientDataVersion);
    }
    if (IsUseAbilityHash != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsUseAbilityHash);
    }
    if (LoginRand != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(LoginRand);
    }
    if (GameBiz.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(GameBiz);
    }
    if (ClientSilenceDataVersion != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(ClientSilenceDataVersion);
    }
    if (PlayerDataVersion != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(PlayerDataVersion);
    }
    if (IsNewPlayer != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsNewPlayer);
    }
    if (IsRelogin != false) {
      output.WriteRawTag(80);
      output.WriteBool(IsRelogin);
    }
    abilityHashMap_.WriteTo(ref output, _map_abilityHashMap_codec);
    if (AbilityHashCode != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(AbilityHashCode);
    }
    if (PlayerData.Length != 0) {
      output.WriteRawTag(106);
      output.WriteBytes(PlayerData);
    }
    if (TargetUid != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(TargetUid);
    }
    if (Retcode != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Retcode);
    }
    if (TotalTickTime != 0D) {
      output.WriteRawTag(233, 7);
      output.WriteDouble(TotalTickTime);
    }
    shortAbilityHashMap_.WriteTo(ref output, _repeated_shortAbilityHashMap_codec);
    if (TargetHomeOwnerUid != 0) {
      output.WriteRawTag(200, 34);
      output.WriteUInt32(TargetHomeOwnerUid);
    }
    blockInfoMap_.WriteTo(ref output, _map_blockInfoMap_codec);
    if (NextResourceUrl.Length != 0) {
      output.WriteRawTag(234, 38);
      output.WriteString(NextResourceUrl);
    }
    if (Birthday.Length != 0) {
      output.WriteRawTag(130, 39);
      output.WriteString(Birthday);
    }
    if (IsEnableClientHashDebug != false) {
      output.WriteRawTag(160, 58);
      output.WriteBool(IsEnableClientHashDebug);
    }
    if (IsDataNeedRelogin != false) {
      output.WriteRawTag(184, 59);
      output.WriteBool(IsDataNeedRelogin);
    }
    if (ClientVersionSuffix.Length != 0) {
      output.WriteRawTag(186, 65);
      output.WriteString(ClientVersionSuffix);
    }
    if (ClientSilenceVersionSuffix.Length != 0) {
      output.WriteRawTag(154, 81);
      output.WriteString(ClientSilenceVersionSuffix);
    }
    featureBlockInfoList_.WriteTo(ref output, _repeated_featureBlockInfoList_codec);
    if (IsScOpen != false) {
      output.WriteRawTag(168, 89);
      output.WriteBool(IsScOpen);
    }
    if (nextResVersionConfig_ != null) {
      output.WriteRawTag(170, 98);
      output.WriteMessage(NextResVersionConfig);
    }
    if (IsLoginRspSplit != false) {
      output.WriteRawTag(136, 103);
      output.WriteBool(IsLoginRspSplit);
    }
    if (IsAudit != false) {
      output.WriteRawTag(168, 105);
      output.WriteBool(IsAudit);
    }
    if (ClientSilenceMd5.Length != 0) {
      output.WriteRawTag(146, 109);
      output.WriteString(ClientSilenceMd5);
    }
    if (ClientMd5.Length != 0) {
      output.WriteRawTag(178, 114);
      output.WriteString(ClientMd5);
    }
    if (CountryCode.Length != 0) {
      output.WriteRawTag(226, 118);
      output.WriteString(CountryCode);
    }
    if (resVersionConfig_ != null) {
      output.WriteRawTag(138, 123);
      output.WriteMessage(ResVersionConfig);
    }
    if (IsTransfer != false) {
      output.WriteRawTag(144, 126);
      output.WriteBool(IsTransfer);
    }
    if (ScInfo.Length != 0) {
      output.WriteRawTag(194, 126);
      output.WriteBytes(ScInfo);
    }
    if (RegisterCps.Length != 0) {
      output.WriteRawTag(194, 127);
      output.WriteString(RegisterCps);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (ClientDataVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientDataVersion);
    }
    if (IsScOpen != false) {
      size += 2 + 1;
    }
    if (Retcode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retcode);
    }
    size += blockInfoMap_.CalculateSize(_map_blockInfoMap_codec);
    if (IsAudit != false) {
      size += 2 + 1;
    }
    if (IsTransfer != false) {
      size += 2 + 1;
    }
    if (ClientSilenceMd5.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientSilenceMd5);
    }
    if (nextResVersionConfig_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(NextResVersionConfig);
    }
    if (ClientSilenceDataVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientSilenceDataVersion);
    }
    if (LoginRand != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LoginRand);
    }
    if (IsNewPlayer != false) {
      size += 1 + 1;
    }
    if (ClientVersionSuffix.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientVersionSuffix);
    }
    if (GameBiz.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GameBiz);
    }
    if (NextResourceUrl.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(NextResourceUrl);
    }
    if (IsRelogin != false) {
      size += 1 + 1;
    }
    if (TotalTickTime != 0D) {
      size += 2 + 8;
    }
    if (IsEnableClientHashDebug != false) {
      size += 2 + 1;
    }
    if (ScInfo.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(ScInfo);
    }
    if (AbilityHashCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityHashCode);
    }
    if (RegisterCps.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(RegisterCps);
    }
    if (IsLoginRspSplit != false) {
      size += 2 + 1;
    }
    if (IsUseAbilityHash != false) {
      size += 1 + 1;
    }
    size += abilityHashMap_.CalculateSize(_map_abilityHashMap_codec);
    size += shortAbilityHashMap_.CalculateSize(_repeated_shortAbilityHashMap_codec);
    if (ClientMd5.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientMd5);
    }
    if (CountryCode.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
    }
    if (IsDataNeedRelogin != false) {
      size += 2 + 1;
    }
    if (resVersionConfig_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResVersionConfig);
    }
    size += featureBlockInfoList_.CalculateSize(_repeated_featureBlockInfoList_codec);
    if (Birthday.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Birthday);
    }
    if (TargetUid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetUid);
    }
    if (PlayerData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlayerData);
    }
    if (ClientSilenceVersionSuffix.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientSilenceVersionSuffix);
    }
    if (TargetHomeOwnerUid != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetHomeOwnerUid);
    }
    if (PlayerDataVersion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerDataVersion);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PlayerLoginRsp other) {
    if (other == null) {
      return;
    }
    if (other.ClientDataVersion != 0) {
      ClientDataVersion = other.ClientDataVersion;
    }
    if (other.IsScOpen != false) {
      IsScOpen = other.IsScOpen;
    }
    if (other.Retcode != 0) {
      Retcode = other.Retcode;
    }
    blockInfoMap_.Add(other.blockInfoMap_);
    if (other.IsAudit != false) {
      IsAudit = other.IsAudit;
    }
    if (other.IsTransfer != false) {
      IsTransfer = other.IsTransfer;
    }
    if (other.ClientSilenceMd5.Length != 0) {
      ClientSilenceMd5 = other.ClientSilenceMd5;
    }
    if (other.nextResVersionConfig_ != null) {
      if (nextResVersionConfig_ == null) {
        NextResVersionConfig = new global::ResVersionConfig();
      }
      NextResVersionConfig.MergeFrom(other.NextResVersionConfig);
    }
    if (other.ClientSilenceDataVersion != 0) {
      ClientSilenceDataVersion = other.ClientSilenceDataVersion;
    }
    if (other.LoginRand != 0UL) {
      LoginRand = other.LoginRand;
    }
    if (other.IsNewPlayer != false) {
      IsNewPlayer = other.IsNewPlayer;
    }
    if (other.ClientVersionSuffix.Length != 0) {
      ClientVersionSuffix = other.ClientVersionSuffix;
    }
    if (other.GameBiz.Length != 0) {
      GameBiz = other.GameBiz;
    }
    if (other.NextResourceUrl.Length != 0) {
      NextResourceUrl = other.NextResourceUrl;
    }
    if (other.IsRelogin != false) {
      IsRelogin = other.IsRelogin;
    }
    if (other.TotalTickTime != 0D) {
      TotalTickTime = other.TotalTickTime;
    }
    if (other.IsEnableClientHashDebug != false) {
      IsEnableClientHashDebug = other.IsEnableClientHashDebug;
    }
    if (other.ScInfo.Length != 0) {
      ScInfo = other.ScInfo;
    }
    if (other.AbilityHashCode != 0) {
      AbilityHashCode = other.AbilityHashCode;
    }
    if (other.RegisterCps.Length != 0) {
      RegisterCps = other.RegisterCps;
    }
    if (other.IsLoginRspSplit != false) {
      IsLoginRspSplit = other.IsLoginRspSplit;
    }
    if (other.IsUseAbilityHash != false) {
      IsUseAbilityHash = other.IsUseAbilityHash;
    }
    abilityHashMap_.Add(other.abilityHashMap_);
    shortAbilityHashMap_.Add(other.shortAbilityHashMap_);
    if (other.ClientMd5.Length != 0) {
      ClientMd5 = other.ClientMd5;
    }
    if (other.CountryCode.Length != 0) {
      CountryCode = other.CountryCode;
    }
    if (other.IsDataNeedRelogin != false) {
      IsDataNeedRelogin = other.IsDataNeedRelogin;
    }
    if (other.resVersionConfig_ != null) {
      if (resVersionConfig_ == null) {
        ResVersionConfig = new global::ResVersionConfig();
      }
      ResVersionConfig.MergeFrom(other.ResVersionConfig);
    }
    featureBlockInfoList_.Add(other.featureBlockInfoList_);
    if (other.Birthday.Length != 0) {
      Birthday = other.Birthday;
    }
    if (other.TargetUid != 0) {
      TargetUid = other.TargetUid;
    }
    if (other.PlayerData.Length != 0) {
      PlayerData = other.PlayerData;
    }
    if (other.ClientSilenceVersionSuffix.Length != 0) {
      ClientSilenceVersionSuffix = other.ClientSilenceVersionSuffix;
    }
    if (other.TargetHomeOwnerUid != 0) {
      TargetHomeOwnerUid = other.TargetHomeOwnerUid;
    }
    if (other.PlayerDataVersion != 0) {
      PlayerDataVersion = other.PlayerDataVersion;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClientDataVersion = input.ReadUInt32();
          break;
        }
        case 16: {
          IsUseAbilityHash = input.ReadBool();
          break;
        }
        case 32: {
          LoginRand = input.ReadUInt64();
          break;
        }
        case 42: {
          GameBiz = input.ReadString();
          break;
        }
        case 48: {
          ClientSilenceDataVersion = input.ReadUInt32();
          break;
        }
        case 56: {
          PlayerDataVersion = input.ReadUInt32();
          break;
        }
        case 64: {
          IsNewPlayer = input.ReadBool();
          break;
        }
        case 80: {
          IsRelogin = input.ReadBool();
          break;
        }
        case 90: {
          abilityHashMap_.AddEntriesFrom(input, _map_abilityHashMap_codec);
          break;
        }
        case 96: {
          AbilityHashCode = input.ReadInt32();
          break;
        }
        case 106: {
          PlayerData = input.ReadBytes();
          break;
        }
        case 112: {
          TargetUid = input.ReadUInt32();
          break;
        }
        case 120: {
          Retcode = input.ReadInt32();
          break;
        }
        case 1001: {
          TotalTickTime = input.ReadDouble();
          break;
        }
        case 2002: {
          shortAbilityHashMap_.AddEntriesFrom(input, _repeated_shortAbilityHashMap_codec);
          break;
        }
        case 4424: {
          TargetHomeOwnerUid = input.ReadUInt32();
          break;
        }
        case 4570: {
          blockInfoMap_.AddEntriesFrom(input, _map_blockInfoMap_codec);
          break;
        }
        case 4970: {
          NextResourceUrl = input.ReadString();
          break;
        }
        case 4994: {
          Birthday = input.ReadString();
          break;
        }
        case 7456: {
          IsEnableClientHashDebug = input.ReadBool();
          break;
        }
        case 7608: {
          IsDataNeedRelogin = input.ReadBool();
          break;
        }
        case 8378: {
          ClientVersionSuffix = input.ReadString();
          break;
        }
        case 10394: {
          ClientSilenceVersionSuffix = input.ReadString();
          break;
        }
        case 10818: {
          featureBlockInfoList_.AddEntriesFrom(input, _repeated_featureBlockInfoList_codec);
          break;
        }
        case 11432: {
          IsScOpen = input.ReadBool();
          break;
        }
        case 12586: {
          if (nextResVersionConfig_ == null) {
            NextResVersionConfig = new global::ResVersionConfig();
          }
          input.ReadMessage(NextResVersionConfig);
          break;
        }
        case 13192: {
          IsLoginRspSplit = input.ReadBool();
          break;
        }
        case 13480: {
          IsAudit = input.ReadBool();
          break;
        }
        case 13970: {
          ClientSilenceMd5 = input.ReadString();
          break;
        }
        case 14642: {
          ClientMd5 = input.ReadString();
          break;
        }
        case 15202: {
          CountryCode = input.ReadString();
          break;
        }
        case 15754: {
          if (resVersionConfig_ == null) {
            ResVersionConfig = new global::ResVersionConfig();
          }
          input.ReadMessage(ResVersionConfig);
          break;
        }
        case 16144: {
          IsTransfer = input.ReadBool();
          break;
        }
        case 16194: {
          ScInfo = input.ReadBytes();
          break;
        }
        case 16322: {
          RegisterCps = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ClientDataVersion = input.ReadUInt32();
          break;
        }
        case 16: {
          IsUseAbilityHash = input.ReadBool();
          break;
        }
        case 32: {
          LoginRand = input.ReadUInt64();
          break;
        }
        case 42: {
          GameBiz = input.ReadString();
          break;
        }
        case 48: {
          ClientSilenceDataVersion = input.ReadUInt32();
          break;
        }
        case 56: {
          PlayerDataVersion = input.ReadUInt32();
          break;
        }
        case 64: {
          IsNewPlayer = input.ReadBool();
          break;
        }
        case 80: {
          IsRelogin = input.ReadBool();
          break;
        }
        case 90: {
          abilityHashMap_.AddEntriesFrom(ref input, _map_abilityHashMap_codec);
          break;
        }
        case 96: {
          AbilityHashCode = input.ReadInt32();
          break;
        }
        case 106: {
          PlayerData = input.ReadBytes();
          break;
        }
        case 112: {
          TargetUid = input.ReadUInt32();
          break;
        }
        case 120: {
          Retcode = input.ReadInt32();
          break;
        }
        case 1001: {
          TotalTickTime = input.ReadDouble();
          break;
        }
        case 2002: {
          shortAbilityHashMap_.AddEntriesFrom(ref input, _repeated_shortAbilityHashMap_codec);
          break;
        }
        case 4424: {
          TargetHomeOwnerUid = input.ReadUInt32();
          break;
        }
        case 4570: {
          blockInfoMap_.AddEntriesFrom(ref input, _map_blockInfoMap_codec);
          break;
        }
        case 4970: {
          NextResourceUrl = input.ReadString();
          break;
        }
        case 4994: {
          Birthday = input.ReadString();
          break;
        }
        case 7456: {
          IsEnableClientHashDebug = input.ReadBool();
          break;
        }
        case 7608: {
          IsDataNeedRelogin = input.ReadBool();
          break;
        }
        case 8378: {
          ClientVersionSuffix = input.ReadString();
          break;
        }
        case 10394: {
          ClientSilenceVersionSuffix = input.ReadString();
          break;
        }
        case 10818: {
          featureBlockInfoList_.AddEntriesFrom(ref input, _repeated_featureBlockInfoList_codec);
          break;
        }
        case 11432: {
          IsScOpen = input.ReadBool();
          break;
        }
        case 12586: {
          if (nextResVersionConfig_ == null) {
            NextResVersionConfig = new global::ResVersionConfig();
          }
          input.ReadMessage(NextResVersionConfig);
          break;
        }
        case 13192: {
          IsLoginRspSplit = input.ReadBool();
          break;
        }
        case 13480: {
          IsAudit = input.ReadBool();
          break;
        }
        case 13970: {
          ClientSilenceMd5 = input.ReadString();
          break;
        }
        case 14642: {
          ClientMd5 = input.ReadString();
          break;
        }
        case 15202: {
          CountryCode = input.ReadString();
          break;
        }
        case 15754: {
          if (resVersionConfig_ == null) {
            ResVersionConfig = new global::ResVersionConfig();
          }
          input.ReadMessage(ResVersionConfig);
          break;
        }
        case 16144: {
          IsTransfer = input.ReadBool();
          break;
        }
        case 16194: {
          ScInfo = input.ReadBytes();
          break;
        }
        case 16322: {
          RegisterCps = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
