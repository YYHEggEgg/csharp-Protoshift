// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BalloonSettleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from BalloonSettleInfo.proto</summary>
public static partial class BalloonSettleInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for BalloonSettleInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BalloonSettleInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdCYWxsb29uU2V0dGxlSW5mby5wcm90bxoWT25saW5lUGxheWVySW5mby5w",
          "cm90byKFAQoRQmFsbG9vblNldHRsZUluZm8SCwoDdWlkGAMgASgNEhMKC3No",
          "b290X2NvdW50GAwgASgNEhEKCW1heF9jb21ibxgJIAEoDRITCgtmaW5hbF9z",
          "Y29yZRgHIAEoDRImCgtwbGF5ZXJfaW5mbxgCIAEoCzIRLk9ubGluZVBsYXll",
          "ckluZm9CHgocZW11LmdyYXNzY3V0dGVyLm5ldC5vbGRwcm90b2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::OnlinePlayerInfoReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BalloonSettleInfo), global::BalloonSettleInfo.Parser, new[]{ "Uid", "ShootCount", "MaxCombo", "FinalScore", "PlayerInfo" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BalloonSettleInfo : pb::IMessage<BalloonSettleInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<BalloonSettleInfo> _parser = new pb::MessageParser<BalloonSettleInfo>(() => new BalloonSettleInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<BalloonSettleInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BalloonSettleInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BalloonSettleInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BalloonSettleInfo(BalloonSettleInfo other) : this() {
    uid_ = other.uid_;
    shootCount_ = other.shootCount_;
    maxCombo_ = other.maxCombo_;
    finalScore_ = other.finalScore_;
    playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public BalloonSettleInfo Clone() {
    return new BalloonSettleInfo(this);
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 3;
  private uint uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  /// <summary>Field number for the "shoot_count" field.</summary>
  public const int ShootCountFieldNumber = 12;
  private uint shootCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ShootCount {
    get { return shootCount_; }
    set {
      shootCount_ = value;
    }
  }

  /// <summary>Field number for the "max_combo" field.</summary>
  public const int MaxComboFieldNumber = 9;
  private uint maxCombo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxCombo {
    get { return maxCombo_; }
    set {
      maxCombo_ = value;
    }
  }

  /// <summary>Field number for the "final_score" field.</summary>
  public const int FinalScoreFieldNumber = 7;
  private uint finalScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FinalScore {
    get { return finalScore_; }
    set {
      finalScore_ = value;
    }
  }

  /// <summary>Field number for the "player_info" field.</summary>
  public const int PlayerInfoFieldNumber = 2;
  private global::OnlinePlayerInfo playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::OnlinePlayerInfo PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as BalloonSettleInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(BalloonSettleInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uid != other.Uid) return false;
    if (ShootCount != other.ShootCount) return false;
    if (MaxCombo != other.MaxCombo) return false;
    if (FinalScore != other.FinalScore) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Uid != 0) hash ^= Uid.GetHashCode();
    if (ShootCount != 0) hash ^= ShootCount.GetHashCode();
    if (MaxCombo != 0) hash ^= MaxCombo.GetHashCode();
    if (FinalScore != 0) hash ^= FinalScore.GetHashCode();
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (playerInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerInfo);
    }
    if (Uid != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Uid);
    }
    if (FinalScore != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(FinalScore);
    }
    if (MaxCombo != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(MaxCombo);
    }
    if (ShootCount != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(ShootCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (playerInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerInfo);
    }
    if (Uid != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Uid);
    }
    if (FinalScore != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(FinalScore);
    }
    if (MaxCombo != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(MaxCombo);
    }
    if (ShootCount != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(ShootCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Uid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
    }
    if (ShootCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShootCount);
    }
    if (MaxCombo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCombo);
    }
    if (FinalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinalScore);
    }
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(BalloonSettleInfo other) {
    if (other == null) {
      return;
    }
    if (other.Uid != 0) {
      Uid = other.Uid;
    }
    if (other.ShootCount != 0) {
      ShootCount = other.ShootCount;
    }
    if (other.MaxCombo != 0) {
      MaxCombo = other.MaxCombo;
    }
    if (other.FinalScore != 0) {
      FinalScore = other.FinalScore;
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        PlayerInfo = new global::OnlinePlayerInfo();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          if (playerInfo_ == null) {
            PlayerInfo = new global::OnlinePlayerInfo();
          }
          input.ReadMessage(PlayerInfo);
          break;
        }
        case 24: {
          Uid = input.ReadUInt32();
          break;
        }
        case 56: {
          FinalScore = input.ReadUInt32();
          break;
        }
        case 72: {
          MaxCombo = input.ReadUInt32();
          break;
        }
        case 96: {
          ShootCount = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 18: {
          if (playerInfo_ == null) {
            PlayerInfo = new global::OnlinePlayerInfo();
          }
          input.ReadMessage(PlayerInfo);
          break;
        }
        case 24: {
          Uid = input.ReadUInt32();
          break;
        }
        case 56: {
          FinalScore = input.ReadUInt32();
          break;
        }
        case 72: {
          MaxCombo = input.ReadUInt32();
          break;
        }
        case 96: {
          ShootCount = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
