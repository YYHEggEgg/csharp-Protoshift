// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InvestigationMonster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from InvestigationMonster.proto</summary>
public static partial class InvestigationMonsterReflection {

  #region Descriptor
  /// <summary>File descriptor for InvestigationMonster.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static InvestigationMonsterReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpJbnZlc3RpZ2F0aW9uTW9uc3Rlci5wcm90bxoMVmVjdG9yLnByb3RvGiFX",
          "ZWVrbHlCb3NzUmVzaW5EaXNjb3VudEluZm8ucHJvdG8ijgQKFEludmVzdGln",
          "YXRpb25Nb25zdGVyEhAKCGlzX2FsaXZlGAkgASgIEhgKEHJlZnJlc2hfaW50",
          "ZXJ2YWwYAyABKA0SCgoCaWQYDSABKA0SDQoFbGV2ZWwYBSABKA0SFgoOYm9z",
          "c19jaGVzdF9udW0YASABKA0SRQofd2Vla2x5X2Jvc3NfcmVzaW5fZGlzY291",
          "bnRfaW5mbxgMIAEoCzIcLldlZWtseUJvc3NSZXNpbkRpc2NvdW50SW5mbxIT",
          "Cgptb25zdGVyX2lkGK0CIAEoDRIUCgNwb3MYDiABKAsyBy5WZWN0b3ISDQoF",
          "cmVzaW4YCCABKA0SGgoSbWF4X2Jvc3NfY2hlc3RfbnVtGAQgASgNEhkKEW5l",
          "eHRfcmVmcmVzaF90aW1lGAsgASgNEhEKCGdyb3VwX2lkGJ0CIAEoDRIQCghz",
          "Y2VuZV9pZBgKIAEoDRIWCg5pc19hcmVhX2xvY2tlZBgPIAEoCBIzCgpsb2Nr",
          "X3N0YXRlGAIgASgOMh8uSW52ZXN0aWdhdGlvbk1vbnN0ZXIuTG9ja1N0YXRl",
          "EiQKHG5leHRfYm9zc19jaGVzdF9yZWZyZXNoX3RpbWUYByABKA0SDwoHY2l0",
          "eV9pZBgGIAEoDSI2CglMb2NrU3RhdGUSEwoPTE9DS19TVEFURV9OT05FEAAS",
          "FAoQTE9DS19TVEFURV9RVUVTVBABQh4KHGVtdS5ncmFzc2N1dHRlci5uZXQu",
          "b2xkcHJvdG9iBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::VectorReflection.Descriptor, global::WeeklyBossResinDiscountInfoReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::InvestigationMonster), global::InvestigationMonster.Parser, new[]{ "IsAlive", "RefreshInterval", "Id", "Level", "BossChestNum", "WeeklyBossResinDiscountInfo", "MonsterId", "Pos", "Resin", "MaxBossChestNum", "NextRefreshTime", "GroupId", "SceneId", "IsAreaLocked", "LockState", "NextBossChestRefreshTime", "CityId" }, null, new[]{ typeof(global::InvestigationMonster.Types.LockState) }, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class InvestigationMonster : pb::IMessage<InvestigationMonster>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<InvestigationMonster> _parser = new pb::MessageParser<InvestigationMonster>(() => new InvestigationMonster());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<InvestigationMonster> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::InvestigationMonsterReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public InvestigationMonster() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public InvestigationMonster(InvestigationMonster other) : this() {
    isAlive_ = other.isAlive_;
    refreshInterval_ = other.refreshInterval_;
    id_ = other.id_;
    level_ = other.level_;
    bossChestNum_ = other.bossChestNum_;
    weeklyBossResinDiscountInfo_ = other.weeklyBossResinDiscountInfo_ != null ? other.weeklyBossResinDiscountInfo_.Clone() : null;
    monsterId_ = other.monsterId_;
    pos_ = other.pos_ != null ? other.pos_.Clone() : null;
    resin_ = other.resin_;
    maxBossChestNum_ = other.maxBossChestNum_;
    nextRefreshTime_ = other.nextRefreshTime_;
    groupId_ = other.groupId_;
    sceneId_ = other.sceneId_;
    isAreaLocked_ = other.isAreaLocked_;
    lockState_ = other.lockState_;
    nextBossChestRefreshTime_ = other.nextBossChestRefreshTime_;
    cityId_ = other.cityId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public InvestigationMonster Clone() {
    return new InvestigationMonster(this);
  }

  /// <summary>Field number for the "is_alive" field.</summary>
  public const int IsAliveFieldNumber = 9;
  private bool isAlive_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAlive {
    get { return isAlive_; }
    set {
      isAlive_ = value;
    }
  }

  /// <summary>Field number for the "refresh_interval" field.</summary>
  public const int RefreshIntervalFieldNumber = 3;
  private uint refreshInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint RefreshInterval {
    get { return refreshInterval_; }
    set {
      refreshInterval_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 13;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private uint level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "boss_chest_num" field.</summary>
  public const int BossChestNumFieldNumber = 1;
  private uint bossChestNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint BossChestNum {
    get { return bossChestNum_; }
    set {
      bossChestNum_ = value;
    }
  }

  /// <summary>Field number for the "weekly_boss_resin_discount_info" field.</summary>
  public const int WeeklyBossResinDiscountInfoFieldNumber = 12;
  private global::WeeklyBossResinDiscountInfo weeklyBossResinDiscountInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::WeeklyBossResinDiscountInfo WeeklyBossResinDiscountInfo {
    get { return weeklyBossResinDiscountInfo_; }
    set {
      weeklyBossResinDiscountInfo_ = value;
    }
  }

  /// <summary>Field number for the "monster_id" field.</summary>
  public const int MonsterIdFieldNumber = 301;
  private uint monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 14;
  private global::Vector pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "resin" field.</summary>
  public const int ResinFieldNumber = 8;
  private uint resin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint Resin {
    get { return resin_; }
    set {
      resin_ = value;
    }
  }

  /// <summary>Field number for the "max_boss_chest_num" field.</summary>
  public const int MaxBossChestNumFieldNumber = 4;
  private uint maxBossChestNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxBossChestNum {
    get { return maxBossChestNum_; }
    set {
      maxBossChestNum_ = value;
    }
  }

  /// <summary>Field number for the "next_refresh_time" field.</summary>
  public const int NextRefreshTimeFieldNumber = 11;
  private uint nextRefreshTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NextRefreshTime {
    get { return nextRefreshTime_; }
    set {
      nextRefreshTime_ = value;
    }
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 285;
  private uint groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "scene_id" field.</summary>
  public const int SceneIdFieldNumber = 10;
  private uint sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "is_area_locked" field.</summary>
  public const int IsAreaLockedFieldNumber = 15;
  private bool isAreaLocked_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsAreaLocked {
    get { return isAreaLocked_; }
    set {
      isAreaLocked_ = value;
    }
  }

  /// <summary>Field number for the "lock_state" field.</summary>
  public const int LockStateFieldNumber = 2;
  private global::InvestigationMonster.Types.LockState lockState_ = global::InvestigationMonster.Types.LockState.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::InvestigationMonster.Types.LockState LockState {
    get { return lockState_; }
    set {
      lockState_ = value;
    }
  }

  /// <summary>Field number for the "next_boss_chest_refresh_time" field.</summary>
  public const int NextBossChestRefreshTimeFieldNumber = 7;
  private uint nextBossChestRefreshTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NextBossChestRefreshTime {
    get { return nextBossChestRefreshTime_; }
    set {
      nextBossChestRefreshTime_ = value;
    }
  }

  /// <summary>Field number for the "city_id" field.</summary>
  public const int CityIdFieldNumber = 6;
  private uint cityId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint CityId {
    get { return cityId_; }
    set {
      cityId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as InvestigationMonster);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(InvestigationMonster other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsAlive != other.IsAlive) return false;
    if (RefreshInterval != other.RefreshInterval) return false;
    if (Id != other.Id) return false;
    if (Level != other.Level) return false;
    if (BossChestNum != other.BossChestNum) return false;
    if (!object.Equals(WeeklyBossResinDiscountInfo, other.WeeklyBossResinDiscountInfo)) return false;
    if (MonsterId != other.MonsterId) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (Resin != other.Resin) return false;
    if (MaxBossChestNum != other.MaxBossChestNum) return false;
    if (NextRefreshTime != other.NextRefreshTime) return false;
    if (GroupId != other.GroupId) return false;
    if (SceneId != other.SceneId) return false;
    if (IsAreaLocked != other.IsAreaLocked) return false;
    if (LockState != other.LockState) return false;
    if (NextBossChestRefreshTime != other.NextBossChestRefreshTime) return false;
    if (CityId != other.CityId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (IsAlive != false) hash ^= IsAlive.GetHashCode();
    if (RefreshInterval != 0) hash ^= RefreshInterval.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (BossChestNum != 0) hash ^= BossChestNum.GetHashCode();
    if (weeklyBossResinDiscountInfo_ != null) hash ^= WeeklyBossResinDiscountInfo.GetHashCode();
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (Resin != 0) hash ^= Resin.GetHashCode();
    if (MaxBossChestNum != 0) hash ^= MaxBossChestNum.GetHashCode();
    if (NextRefreshTime != 0) hash ^= NextRefreshTime.GetHashCode();
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (IsAreaLocked != false) hash ^= IsAreaLocked.GetHashCode();
    if (LockState != global::InvestigationMonster.Types.LockState.None) hash ^= LockState.GetHashCode();
    if (NextBossChestRefreshTime != 0) hash ^= NextBossChestRefreshTime.GetHashCode();
    if (CityId != 0) hash ^= CityId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (BossChestNum != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BossChestNum);
    }
    if (LockState != global::InvestigationMonster.Types.LockState.None) {
      output.WriteRawTag(16);
      output.WriteEnum((int) LockState);
    }
    if (RefreshInterval != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(RefreshInterval);
    }
    if (MaxBossChestNum != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(MaxBossChestNum);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Level);
    }
    if (CityId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(CityId);
    }
    if (NextBossChestRefreshTime != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(NextBossChestRefreshTime);
    }
    if (Resin != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(Resin);
    }
    if (IsAlive != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsAlive);
    }
    if (SceneId != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(SceneId);
    }
    if (NextRefreshTime != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(NextRefreshTime);
    }
    if (weeklyBossResinDiscountInfo_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(WeeklyBossResinDiscountInfo);
    }
    if (Id != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(Id);
    }
    if (pos_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Pos);
    }
    if (IsAreaLocked != false) {
      output.WriteRawTag(120);
      output.WriteBool(IsAreaLocked);
    }
    if (GroupId != 0) {
      output.WriteRawTag(232, 17);
      output.WriteUInt32(GroupId);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(232, 18);
      output.WriteUInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (BossChestNum != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BossChestNum);
    }
    if (LockState != global::InvestigationMonster.Types.LockState.None) {
      output.WriteRawTag(16);
      output.WriteEnum((int) LockState);
    }
    if (RefreshInterval != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(RefreshInterval);
    }
    if (MaxBossChestNum != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(MaxBossChestNum);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Level);
    }
    if (CityId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(CityId);
    }
    if (NextBossChestRefreshTime != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(NextBossChestRefreshTime);
    }
    if (Resin != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(Resin);
    }
    if (IsAlive != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsAlive);
    }
    if (SceneId != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(SceneId);
    }
    if (NextRefreshTime != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(NextRefreshTime);
    }
    if (weeklyBossResinDiscountInfo_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(WeeklyBossResinDiscountInfo);
    }
    if (Id != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(Id);
    }
    if (pos_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Pos);
    }
    if (IsAreaLocked != false) {
      output.WriteRawTag(120);
      output.WriteBool(IsAreaLocked);
    }
    if (GroupId != 0) {
      output.WriteRawTag(232, 17);
      output.WriteUInt32(GroupId);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(232, 18);
      output.WriteUInt32(MonsterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (IsAlive != false) {
      size += 1 + 1;
    }
    if (RefreshInterval != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshInterval);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
    }
    if (BossChestNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossChestNum);
    }
    if (weeklyBossResinDiscountInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeeklyBossResinDiscountInfo);
    }
    if (MonsterId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (Resin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resin);
    }
    if (MaxBossChestNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBossChestNum);
    }
    if (NextRefreshTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextRefreshTime);
    }
    if (GroupId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
    }
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
    }
    if (IsAreaLocked != false) {
      size += 1 + 1;
    }
    if (LockState != global::InvestigationMonster.Types.LockState.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LockState);
    }
    if (NextBossChestRefreshTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextBossChestRefreshTime);
    }
    if (CityId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CityId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(InvestigationMonster other) {
    if (other == null) {
      return;
    }
    if (other.IsAlive != false) {
      IsAlive = other.IsAlive;
    }
    if (other.RefreshInterval != 0) {
      RefreshInterval = other.RefreshInterval;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.BossChestNum != 0) {
      BossChestNum = other.BossChestNum;
    }
    if (other.weeklyBossResinDiscountInfo_ != null) {
      if (weeklyBossResinDiscountInfo_ == null) {
        WeeklyBossResinDiscountInfo = new global::WeeklyBossResinDiscountInfo();
      }
      WeeklyBossResinDiscountInfo.MergeFrom(other.WeeklyBossResinDiscountInfo);
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        Pos = new global::Vector();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.Resin != 0) {
      Resin = other.Resin;
    }
    if (other.MaxBossChestNum != 0) {
      MaxBossChestNum = other.MaxBossChestNum;
    }
    if (other.NextRefreshTime != 0) {
      NextRefreshTime = other.NextRefreshTime;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    if (other.IsAreaLocked != false) {
      IsAreaLocked = other.IsAreaLocked;
    }
    if (other.LockState != global::InvestigationMonster.Types.LockState.None) {
      LockState = other.LockState;
    }
    if (other.NextBossChestRefreshTime != 0) {
      NextBossChestRefreshTime = other.NextBossChestRefreshTime;
    }
    if (other.CityId != 0) {
      CityId = other.CityId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BossChestNum = input.ReadUInt32();
          break;
        }
        case 16: {
          LockState = (global::InvestigationMonster.Types.LockState) input.ReadEnum();
          break;
        }
        case 24: {
          RefreshInterval = input.ReadUInt32();
          break;
        }
        case 32: {
          MaxBossChestNum = input.ReadUInt32();
          break;
        }
        case 40: {
          Level = input.ReadUInt32();
          break;
        }
        case 48: {
          CityId = input.ReadUInt32();
          break;
        }
        case 56: {
          NextBossChestRefreshTime = input.ReadUInt32();
          break;
        }
        case 64: {
          Resin = input.ReadUInt32();
          break;
        }
        case 72: {
          IsAlive = input.ReadBool();
          break;
        }
        case 80: {
          SceneId = input.ReadUInt32();
          break;
        }
        case 88: {
          NextRefreshTime = input.ReadUInt32();
          break;
        }
        case 98: {
          if (weeklyBossResinDiscountInfo_ == null) {
            WeeklyBossResinDiscountInfo = new global::WeeklyBossResinDiscountInfo();
          }
          input.ReadMessage(WeeklyBossResinDiscountInfo);
          break;
        }
        case 104: {
          Id = input.ReadUInt32();
          break;
        }
        case 114: {
          if (pos_ == null) {
            Pos = new global::Vector();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 120: {
          IsAreaLocked = input.ReadBool();
          break;
        }
        case 2280: {
          GroupId = input.ReadUInt32();
          break;
        }
        case 2408: {
          MonsterId = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          BossChestNum = input.ReadUInt32();
          break;
        }
        case 16: {
          LockState = (global::InvestigationMonster.Types.LockState) input.ReadEnum();
          break;
        }
        case 24: {
          RefreshInterval = input.ReadUInt32();
          break;
        }
        case 32: {
          MaxBossChestNum = input.ReadUInt32();
          break;
        }
        case 40: {
          Level = input.ReadUInt32();
          break;
        }
        case 48: {
          CityId = input.ReadUInt32();
          break;
        }
        case 56: {
          NextBossChestRefreshTime = input.ReadUInt32();
          break;
        }
        case 64: {
          Resin = input.ReadUInt32();
          break;
        }
        case 72: {
          IsAlive = input.ReadBool();
          break;
        }
        case 80: {
          SceneId = input.ReadUInt32();
          break;
        }
        case 88: {
          NextRefreshTime = input.ReadUInt32();
          break;
        }
        case 98: {
          if (weeklyBossResinDiscountInfo_ == null) {
            WeeklyBossResinDiscountInfo = new global::WeeklyBossResinDiscountInfo();
          }
          input.ReadMessage(WeeklyBossResinDiscountInfo);
          break;
        }
        case 104: {
          Id = input.ReadUInt32();
          break;
        }
        case 114: {
          if (pos_ == null) {
            Pos = new global::Vector();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 120: {
          IsAreaLocked = input.ReadBool();
          break;
        }
        case 2280: {
          GroupId = input.ReadUInt32();
          break;
        }
        case 2408: {
          MonsterId = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the InvestigationMonster message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum LockState {
      [pbr::OriginalName("LOCK_STATE_NONE")] None = 0,
      [pbr::OriginalName("LOCK_STATE_QUEST")] Quest = 1,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
