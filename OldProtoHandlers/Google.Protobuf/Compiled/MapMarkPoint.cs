// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MapMarkPoint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from MapMarkPoint.proto</summary>
public static partial class MapMarkPointReflection {

  #region Descriptor
  /// <summary>File descriptor for MapMarkPoint.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MapMarkPointReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJNYXBNYXJrUG9pbnQucHJvdG8aFU1hcE1hcmtGcm9tVHlwZS5wcm90bxoW",
          "TWFwTWFya1BvaW50VHlwZS5wcm90bxoMVmVjdG9yLnByb3RvIrYBCgxNYXBN",
          "YXJrUG9pbnQSEAoIc2NlbmVfaWQYASABKA0SDAoEbmFtZRgCIAEoCRIUCgNw",
          "b3MYAyABKAsyBy5WZWN0b3ISJQoKcG9pbnRfdHlwZRgEIAEoDjIRLk1hcE1h",
          "cmtQb2ludFR5cGUSEgoKbW9uc3Rlcl9pZBgFIAEoDRIjCglmcm9tX3R5cGUY",
          "BiABKA4yEC5NYXBNYXJrRnJvbVR5cGUSEAoIcXVlc3RfaWQYByABKA1CHgoc",
          "ZW11LmdyYXNzY3V0dGVyLm5ldC5vbGRwcm90b2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::MapMarkFromTypeReflection.Descriptor, global::MapMarkPointTypeReflection.Descriptor, global::VectorReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MapMarkPoint), global::MapMarkPoint.Parser, new[]{ "SceneId", "Name", "Pos", "PointType", "MonsterId", "FromType", "QuestId" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class MapMarkPoint : pb::IMessage<MapMarkPoint>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MapMarkPoint> _parser = new pb::MessageParser<MapMarkPoint>(() => new MapMarkPoint());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<MapMarkPoint> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MapMarkPointReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MapMarkPoint() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MapMarkPoint(MapMarkPoint other) : this() {
    sceneId_ = other.sceneId_;
    name_ = other.name_;
    pos_ = other.pos_ != null ? other.pos_.Clone() : null;
    pointType_ = other.pointType_;
    monsterId_ = other.monsterId_;
    fromType_ = other.fromType_;
    questId_ = other.questId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MapMarkPoint Clone() {
    return new MapMarkPoint(this);
  }

  /// <summary>Field number for the "scene_id" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private uint sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 3;
  private global::Vector pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Vector Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "point_type" field.</summary>
  public const int PointTypeFieldNumber = 4;
  private global::MapMarkPointType pointType_ = global::MapMarkPointType.Npc;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MapMarkPointType PointType {
    get { return pointType_; }
    set {
      pointType_ = value;
    }
  }

  /// <summary>Field number for the "monster_id" field.</summary>
  public const int MonsterIdFieldNumber = 5;
  private uint monsterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MonsterId {
    get { return monsterId_; }
    set {
      monsterId_ = value;
    }
  }

  /// <summary>Field number for the "from_type" field.</summary>
  public const int FromTypeFieldNumber = 6;
  private global::MapMarkFromType fromType_ = global::MapMarkFromType.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MapMarkFromType FromType {
    get { return fromType_; }
    set {
      fromType_ = value;
    }
  }

  /// <summary>Field number for the "quest_id" field.</summary>
  public const int QuestIdFieldNumber = 7;
  private uint questId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint QuestId {
    get { return questId_; }
    set {
      questId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as MapMarkPoint);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(MapMarkPoint other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (PointType != other.PointType) return false;
    if (MonsterId != other.MonsterId) return false;
    if (FromType != other.FromType) return false;
    if (QuestId != other.QuestId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (PointType != global::MapMarkPointType.Npc) hash ^= PointType.GetHashCode();
    if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
    if (FromType != global::MapMarkFromType.None) hash ^= FromType.GetHashCode();
    if (QuestId != 0) hash ^= QuestId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (SceneId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(SceneId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (pos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pos);
    }
    if (PointType != global::MapMarkPointType.Npc) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PointType);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(MonsterId);
    }
    if (FromType != global::MapMarkFromType.None) {
      output.WriteRawTag(48);
      output.WriteEnum((int) FromType);
    }
    if (QuestId != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(QuestId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (SceneId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(SceneId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (pos_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Pos);
    }
    if (PointType != global::MapMarkPointType.Npc) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PointType);
    }
    if (MonsterId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(MonsterId);
    }
    if (FromType != global::MapMarkFromType.None) {
      output.WriteRawTag(48);
      output.WriteEnum((int) FromType);
    }
    if (QuestId != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(QuestId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (PointType != global::MapMarkPointType.Npc) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PointType);
    }
    if (MonsterId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
    }
    if (FromType != global::MapMarkFromType.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FromType);
    }
    if (QuestId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QuestId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(MapMarkPoint other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        Pos = new global::Vector();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.PointType != global::MapMarkPointType.Npc) {
      PointType = other.PointType;
    }
    if (other.MonsterId != 0) {
      MonsterId = other.MonsterId;
    }
    if (other.FromType != global::MapMarkFromType.None) {
      FromType = other.FromType;
    }
    if (other.QuestId != 0) {
      QuestId = other.QuestId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadUInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          if (pos_ == null) {
            Pos = new global::Vector();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 32: {
          PointType = (global::MapMarkPointType) input.ReadEnum();
          break;
        }
        case 40: {
          MonsterId = input.ReadUInt32();
          break;
        }
        case 48: {
          FromType = (global::MapMarkFromType) input.ReadEnum();
          break;
        }
        case 56: {
          QuestId = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SceneId = input.ReadUInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          if (pos_ == null) {
            Pos = new global::Vector();
          }
          input.ReadMessage(Pos);
          break;
        }
        case 32: {
          PointType = (global::MapMarkPointType) input.ReadEnum();
          break;
        }
        case 40: {
          MonsterId = input.ReadUInt32();
          break;
        }
        case 48: {
          FromType = (global::MapMarkFromType) input.ReadEnum();
          break;
        }
        case 56: {
          QuestId = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
