// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ScenePlayInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ScenePlayInfo.proto</summary>
public static partial class ScenePlayInfoReflection {

  #region Descriptor
  /// <summary>File descriptor for ScenePlayInfo.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ScenePlayInfoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNTY2VuZVBsYXlJbmZvLnByb3RvIlYKDVNjZW5lUGxheUluZm8SDwoHaXNf",
          "b3BlbhgOIAEoCBIQCghlbnRyeV9pZBgKIAEoDRIPCgdwbGF5X2lkGA8gASgN",
          "EhEKCXBsYXlfdHlwZRgNIAEoDUIWChRvcmcuc29yYXBvaW50YS5wcm90b2IG",
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ScenePlayInfo), global::ScenePlayInfo.Parser, new[]{ "IsOpen", "EntryId", "PlayId", "PlayType" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ScenePlayInfo : pb::IMessage<ScenePlayInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ScenePlayInfo> _parser = new pb::MessageParser<ScenePlayInfo>(() => new ScenePlayInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ScenePlayInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ScenePlayInfoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayInfo(ScenePlayInfo other) : this() {
    isOpen_ = other.isOpen_;
    entryId_ = other.entryId_;
    playId_ = other.playId_;
    playType_ = other.playType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayInfo Clone() {
    return new ScenePlayInfo(this);
  }

  /// <summary>Field number for the "is_open" field.</summary>
  public const int IsOpenFieldNumber = 14;
  private bool isOpen_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsOpen {
    get { return isOpen_; }
    set {
      isOpen_ = value;
    }
  }

  /// <summary>Field number for the "entry_id" field.</summary>
  public const int EntryIdFieldNumber = 10;
  private uint entryId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EntryId {
    get { return entryId_; }
    set {
      entryId_ = value;
    }
  }

  /// <summary>Field number for the "play_id" field.</summary>
  public const int PlayIdFieldNumber = 15;
  private uint playId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PlayId {
    get { return playId_; }
    set {
      playId_ = value;
    }
  }

  /// <summary>Field number for the "play_type" field.</summary>
  public const int PlayTypeFieldNumber = 13;
  private uint playType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PlayType {
    get { return playType_; }
    set {
      playType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ScenePlayInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ScenePlayInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsOpen != other.IsOpen) return false;
    if (EntryId != other.EntryId) return false;
    if (PlayId != other.PlayId) return false;
    if (PlayType != other.PlayType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (IsOpen != false) hash ^= IsOpen.GetHashCode();
    if (EntryId != 0) hash ^= EntryId.GetHashCode();
    if (PlayId != 0) hash ^= PlayId.GetHashCode();
    if (PlayType != 0) hash ^= PlayType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (EntryId != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(EntryId);
    }
    if (PlayType != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(PlayType);
    }
    if (IsOpen != false) {
      output.WriteRawTag(112);
      output.WriteBool(IsOpen);
    }
    if (PlayId != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(PlayId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (EntryId != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(EntryId);
    }
    if (PlayType != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(PlayType);
    }
    if (IsOpen != false) {
      output.WriteRawTag(112);
      output.WriteBool(IsOpen);
    }
    if (PlayId != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(PlayId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (IsOpen != false) {
      size += 1 + 1;
    }
    if (EntryId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntryId);
    }
    if (PlayId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayId);
    }
    if (PlayType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ScenePlayInfo other) {
    if (other == null) {
      return;
    }
    if (other.IsOpen != false) {
      IsOpen = other.IsOpen;
    }
    if (other.EntryId != 0) {
      EntryId = other.EntryId;
    }
    if (other.PlayId != 0) {
      PlayId = other.PlayId;
    }
    if (other.PlayType != 0) {
      PlayType = other.PlayType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 80: {
          EntryId = input.ReadUInt32();
          break;
        }
        case 104: {
          PlayType = input.ReadUInt32();
          break;
        }
        case 112: {
          IsOpen = input.ReadBool();
          break;
        }
        case 120: {
          PlayId = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 80: {
          EntryId = input.ReadUInt32();
          break;
        }
        case 104: {
          PlayType = input.ReadUInt32();
          break;
        }
        case 112: {
          IsOpen = input.ReadBool();
          break;
        }
        case 120: {
          PlayId = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
