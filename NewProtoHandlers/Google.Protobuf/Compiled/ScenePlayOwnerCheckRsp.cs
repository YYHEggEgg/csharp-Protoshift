// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ScenePlayOwnerCheckRsp.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ScenePlayOwnerCheckRsp.proto</summary>
public static partial class ScenePlayOwnerCheckRspReflection {

  #region Descriptor
  /// <summary>File descriptor for ScenePlayOwnerCheckRsp.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ScenePlayOwnerCheckRspReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChxTY2VuZVBsYXlPd25lckNoZWNrUnNwLnByb3RvIngKFlNjZW5lUGxheU93",
          "bmVyQ2hlY2tSc3ASEQoJd3JvbmdfdWlkGAEgASgNEhIKCnBhcmFtX2xpc3QY",
          "BiADKA0SDwoHcmV0Y29kZRgHIAEoBRIVCg1pc19za2lwX21hdGNoGA4gASgI",
          "Eg8KB3BsYXlfaWQYBCABKA1CFgoUb3JnLnNvcmFwb2ludGEucHJvdG9iBnBy",
          "b3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ScenePlayOwnerCheckRsp), global::ScenePlayOwnerCheckRsp.Parser, new[]{ "WrongUid", "ParamList", "Retcode", "IsSkipMatch", "PlayId" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// enum CmdId {
///   option allow_alias = true;
///   NONE = 0;
///   CMD_ID = 4406;
///   ENET_CHANNEL_ID = 0;
///   ENET_IS_RELIABLE = 1;
/// }
/// </summary>
public sealed partial class ScenePlayOwnerCheckRsp : pb::IMessage<ScenePlayOwnerCheckRsp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ScenePlayOwnerCheckRsp> _parser = new pb::MessageParser<ScenePlayOwnerCheckRsp>(() => new ScenePlayOwnerCheckRsp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ScenePlayOwnerCheckRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ScenePlayOwnerCheckRspReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayOwnerCheckRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayOwnerCheckRsp(ScenePlayOwnerCheckRsp other) : this() {
    wrongUid_ = other.wrongUid_;
    paramList_ = other.paramList_.Clone();
    retcode_ = other.retcode_;
    isSkipMatch_ = other.isSkipMatch_;
    playId_ = other.playId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ScenePlayOwnerCheckRsp Clone() {
    return new ScenePlayOwnerCheckRsp(this);
  }

  /// <summary>Field number for the "wrong_uid" field.</summary>
  public const int WrongUidFieldNumber = 1;
  private uint wrongUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint WrongUid {
    get { return wrongUid_; }
    set {
      wrongUid_ = value;
    }
  }

  /// <summary>Field number for the "param_list" field.</summary>
  public const int ParamListFieldNumber = 6;
  private static readonly pb::FieldCodec<uint> _repeated_paramList_codec
      = pb::FieldCodec.ForUInt32(50);
  private readonly pbc::RepeatedField<uint> paramList_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<uint> ParamList {
    get { return paramList_; }
  }

  /// <summary>Field number for the "retcode" field.</summary>
  public const int RetcodeFieldNumber = 7;
  private int retcode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Retcode {
    get { return retcode_; }
    set {
      retcode_ = value;
    }
  }

  /// <summary>Field number for the "is_skip_match" field.</summary>
  public const int IsSkipMatchFieldNumber = 14;
  private bool isSkipMatch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsSkipMatch {
    get { return isSkipMatch_; }
    set {
      isSkipMatch_ = value;
    }
  }

  /// <summary>Field number for the "play_id" field.</summary>
  public const int PlayIdFieldNumber = 4;
  private uint playId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint PlayId {
    get { return playId_; }
    set {
      playId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ScenePlayOwnerCheckRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ScenePlayOwnerCheckRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WrongUid != other.WrongUid) return false;
    if(!paramList_.Equals(other.paramList_)) return false;
    if (Retcode != other.Retcode) return false;
    if (IsSkipMatch != other.IsSkipMatch) return false;
    if (PlayId != other.PlayId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (WrongUid != 0) hash ^= WrongUid.GetHashCode();
    hash ^= paramList_.GetHashCode();
    if (Retcode != 0) hash ^= Retcode.GetHashCode();
    if (IsSkipMatch != false) hash ^= IsSkipMatch.GetHashCode();
    if (PlayId != 0) hash ^= PlayId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (WrongUid != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(WrongUid);
    }
    if (PlayId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(PlayId);
    }
    paramList_.WriteTo(output, _repeated_paramList_codec);
    if (Retcode != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Retcode);
    }
    if (IsSkipMatch != false) {
      output.WriteRawTag(112);
      output.WriteBool(IsSkipMatch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (WrongUid != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(WrongUid);
    }
    if (PlayId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(PlayId);
    }
    paramList_.WriteTo(ref output, _repeated_paramList_codec);
    if (Retcode != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Retcode);
    }
    if (IsSkipMatch != false) {
      output.WriteRawTag(112);
      output.WriteBool(IsSkipMatch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (WrongUid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WrongUid);
    }
    size += paramList_.CalculateSize(_repeated_paramList_codec);
    if (Retcode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retcode);
    }
    if (IsSkipMatch != false) {
      size += 1 + 1;
    }
    if (PlayId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ScenePlayOwnerCheckRsp other) {
    if (other == null) {
      return;
    }
    if (other.WrongUid != 0) {
      WrongUid = other.WrongUid;
    }
    paramList_.Add(other.paramList_);
    if (other.Retcode != 0) {
      Retcode = other.Retcode;
    }
    if (other.IsSkipMatch != false) {
      IsSkipMatch = other.IsSkipMatch;
    }
    if (other.PlayId != 0) {
      PlayId = other.PlayId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WrongUid = input.ReadUInt32();
          break;
        }
        case 32: {
          PlayId = input.ReadUInt32();
          break;
        }
        case 50:
        case 48: {
          paramList_.AddEntriesFrom(input, _repeated_paramList_codec);
          break;
        }
        case 56: {
          Retcode = input.ReadInt32();
          break;
        }
        case 112: {
          IsSkipMatch = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          WrongUid = input.ReadUInt32();
          break;
        }
        case 32: {
          PlayId = input.ReadUInt32();
          break;
        }
        case 50:
        case 48: {
          paramList_.AddEntriesFrom(ref input, _repeated_paramList_codec);
          break;
        }
        case 56: {
          Retcode = input.ReadInt32();
          break;
        }
        case 112: {
          IsSkipMatch = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
