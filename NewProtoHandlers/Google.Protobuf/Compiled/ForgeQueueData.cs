// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ForgeQueueData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ForgeQueueData.proto</summary>
public static partial class ForgeQueueDataReflection {

  #region Descriptor
  /// <summary>File descriptor for ForgeQueueData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ForgeQueueDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRGb3JnZVF1ZXVlRGF0YS5wcm90byK0AQoORm9yZ2VRdWV1ZURhdGESHQoV",
          "bmV4dF9maW5pc2hfdGltZXN0YW1wGAEgASgNEhAKCGZvcmdlX2lkGAUgASgN",
          "EhQKDGZpbmlzaF9jb3VudBgHIAEoDRIQCghxdWV1ZV9pZBgEIAEoDRIeChZ0",
          "b3RhbF9maW5pc2hfdGltZXN0YW1wGA8gASgNEhEKCWF2YXRhcl9pZBgMIAEo",
          "DRIWCg51bmZpbmlzaF9jb3VudBgDIAEoDUIWChRvcmcuc29yYXBvaW50YS5w",
          "cm90b2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ForgeQueueData), global::ForgeQueueData.Parser, new[]{ "NextFinishTimestamp", "ForgeId", "FinishCount", "QueueId", "TotalFinishTimestamp", "AvatarId", "UnfinishCount" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ForgeQueueData : pb::IMessage<ForgeQueueData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ForgeQueueData> _parser = new pb::MessageParser<ForgeQueueData>(() => new ForgeQueueData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ForgeQueueData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ForgeQueueDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ForgeQueueData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ForgeQueueData(ForgeQueueData other) : this() {
    nextFinishTimestamp_ = other.nextFinishTimestamp_;
    forgeId_ = other.forgeId_;
    finishCount_ = other.finishCount_;
    queueId_ = other.queueId_;
    totalFinishTimestamp_ = other.totalFinishTimestamp_;
    avatarId_ = other.avatarId_;
    unfinishCount_ = other.unfinishCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ForgeQueueData Clone() {
    return new ForgeQueueData(this);
  }

  /// <summary>Field number for the "next_finish_timestamp" field.</summary>
  public const int NextFinishTimestampFieldNumber = 1;
  private uint nextFinishTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint NextFinishTimestamp {
    get { return nextFinishTimestamp_; }
    set {
      nextFinishTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "forge_id" field.</summary>
  public const int ForgeIdFieldNumber = 5;
  private uint forgeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint ForgeId {
    get { return forgeId_; }
    set {
      forgeId_ = value;
    }
  }

  /// <summary>Field number for the "finish_count" field.</summary>
  public const int FinishCountFieldNumber = 7;
  private uint finishCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint FinishCount {
    get { return finishCount_; }
    set {
      finishCount_ = value;
    }
  }

  /// <summary>Field number for the "queue_id" field.</summary>
  public const int QueueIdFieldNumber = 4;
  private uint queueId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint QueueId {
    get { return queueId_; }
    set {
      queueId_ = value;
    }
  }

  /// <summary>Field number for the "total_finish_timestamp" field.</summary>
  public const int TotalFinishTimestampFieldNumber = 15;
  private uint totalFinishTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TotalFinishTimestamp {
    get { return totalFinishTimestamp_; }
    set {
      totalFinishTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "avatar_id" field.</summary>
  public const int AvatarIdFieldNumber = 12;
  private uint avatarId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint AvatarId {
    get { return avatarId_; }
    set {
      avatarId_ = value;
    }
  }

  /// <summary>Field number for the "unfinish_count" field.</summary>
  public const int UnfinishCountFieldNumber = 3;
  private uint unfinishCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint UnfinishCount {
    get { return unfinishCount_; }
    set {
      unfinishCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ForgeQueueData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ForgeQueueData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NextFinishTimestamp != other.NextFinishTimestamp) return false;
    if (ForgeId != other.ForgeId) return false;
    if (FinishCount != other.FinishCount) return false;
    if (QueueId != other.QueueId) return false;
    if (TotalFinishTimestamp != other.TotalFinishTimestamp) return false;
    if (AvatarId != other.AvatarId) return false;
    if (UnfinishCount != other.UnfinishCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (NextFinishTimestamp != 0) hash ^= NextFinishTimestamp.GetHashCode();
    if (ForgeId != 0) hash ^= ForgeId.GetHashCode();
    if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
    if (QueueId != 0) hash ^= QueueId.GetHashCode();
    if (TotalFinishTimestamp != 0) hash ^= TotalFinishTimestamp.GetHashCode();
    if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
    if (UnfinishCount != 0) hash ^= UnfinishCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (NextFinishTimestamp != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(NextFinishTimestamp);
    }
    if (UnfinishCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UnfinishCount);
    }
    if (QueueId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(QueueId);
    }
    if (ForgeId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(ForgeId);
    }
    if (FinishCount != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(FinishCount);
    }
    if (AvatarId != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(AvatarId);
    }
    if (TotalFinishTimestamp != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(TotalFinishTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (NextFinishTimestamp != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(NextFinishTimestamp);
    }
    if (UnfinishCount != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UnfinishCount);
    }
    if (QueueId != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(QueueId);
    }
    if (ForgeId != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(ForgeId);
    }
    if (FinishCount != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(FinishCount);
    }
    if (AvatarId != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(AvatarId);
    }
    if (TotalFinishTimestamp != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(TotalFinishTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (NextFinishTimestamp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextFinishTimestamp);
    }
    if (ForgeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForgeId);
    }
    if (FinishCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishCount);
    }
    if (QueueId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueueId);
    }
    if (TotalFinishTimestamp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalFinishTimestamp);
    }
    if (AvatarId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvatarId);
    }
    if (UnfinishCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnfinishCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ForgeQueueData other) {
    if (other == null) {
      return;
    }
    if (other.NextFinishTimestamp != 0) {
      NextFinishTimestamp = other.NextFinishTimestamp;
    }
    if (other.ForgeId != 0) {
      ForgeId = other.ForgeId;
    }
    if (other.FinishCount != 0) {
      FinishCount = other.FinishCount;
    }
    if (other.QueueId != 0) {
      QueueId = other.QueueId;
    }
    if (other.TotalFinishTimestamp != 0) {
      TotalFinishTimestamp = other.TotalFinishTimestamp;
    }
    if (other.AvatarId != 0) {
      AvatarId = other.AvatarId;
    }
    if (other.UnfinishCount != 0) {
      UnfinishCount = other.UnfinishCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NextFinishTimestamp = input.ReadUInt32();
          break;
        }
        case 24: {
          UnfinishCount = input.ReadUInt32();
          break;
        }
        case 32: {
          QueueId = input.ReadUInt32();
          break;
        }
        case 40: {
          ForgeId = input.ReadUInt32();
          break;
        }
        case 56: {
          FinishCount = input.ReadUInt32();
          break;
        }
        case 96: {
          AvatarId = input.ReadUInt32();
          break;
        }
        case 120: {
          TotalFinishTimestamp = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          NextFinishTimestamp = input.ReadUInt32();
          break;
        }
        case 24: {
          UnfinishCount = input.ReadUInt32();
          break;
        }
        case 32: {
          QueueId = input.ReadUInt32();
          break;
        }
        case 40: {
          ForgeId = input.ReadUInt32();
          break;
        }
        case 56: {
          FinishCount = input.ReadUInt32();
          break;
        }
        case 96: {
          AvatarId = input.ReadUInt32();
          break;
        }
        case 120: {
          TotalFinishTimestamp = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
