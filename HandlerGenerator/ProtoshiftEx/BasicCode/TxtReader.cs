#region // Generated by ChatGPT
// 请你编写一个静态类 TxtReader，读取具有以下格式的 txt 内容：

// - 每行代表一个内容，忽略前导/后置空格/缩进。
// - 以 `#` 代表注释符号。
// - 忽略空行。
// - 忽略行末注释。

// 它需要实现：

// - `List<string> ReadFrom(string filePath)`：传入文件所在路径，返回每行有效内容的集合。
#endregion


using YYHEggEgg.Logger;

namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    public static class TxtReader
    {
        public static List<string> ReadFrom(string filePath)
        {
            var lines = from line in File.ReadAllLines(filePath)
                        let trimmedLine = line.Trim()
                        where !string.IsNullOrWhiteSpace(trimmedLine) && !trimmedLine.StartsWith("#")
                        let index = trimmedLine.IndexOf('#')
                        select index >= 0 ? trimmedLine.Substring(0, index).TrimEnd() : trimmedLine;

            return lines.ToList();
        }

        /// <summary>
        /// Read a TXT file with certain count of lines.
        /// Throw <see cref="InvalidOperationException"/>
        /// if there's too few lines, or raise a warning
        /// when there's too many lines.
        /// </summary>
        /// <returns>A string? array that have a length of <paramref name="maxLinesCount"/>.</returns>
        public static string?[] ReadSpecifiedCount(string filePath, 
            int minLinesCount, int maxLinesCount, string? logWarnSender = null)
        {
            var list = ReadFrom(filePath);
            if (list.Count < minLinesCount)
            {
                throw new InvalidOperationException(
                    $"{filePath} has too few lines (< {minLinesCount}). Please set it back to default.");
            }
            else if (list.Count > maxLinesCount)
            {
                Log.Warn($"{filePath} has more than {maxLinesCount} lines. " +
                    $"Notice that only the first two lines take effect.", logWarnSender);
            }

            var rtn = new string[maxLinesCount];
            for (int i = 0; i < list.Count; i++) rtn[i] = list[i];
            return rtn;
        }
        
        /// <summary>
        /// Read a TXT file with certain count of lines.
        /// Throw <see cref="InvalidOperationException"/>
        /// if there's too few lines, or raise a warning
        /// when there's too many lines.
        /// </summary>
        /// <returns></returns>
#pragma warning disable CS8619
        public static string[] ReadSpecifiedCount(string filePath, 
            int linesCount, string? logWarnSender = null) =>
            ReadSpecifiedCount(filePath, linesCount, linesCount, logWarnSender);
#pragma warning restore CS8619
    }
}