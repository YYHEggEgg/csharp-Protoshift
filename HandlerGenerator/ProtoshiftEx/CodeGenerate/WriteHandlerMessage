namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    public partial class WriteHandler
    {
        /// <summary>
        /// Generate a Message Handler class. Only handle the class body part, starting with <c>public class</c>.
        /// </summary>
        /// <param name="fi">The CodeWriter (Generated outside).</param>
        /// <param name="messageName">The message name.</param>
        /// <param name="oldmessage">The analyzed old message.</param>
        /// <param name="newmessage">The analyzed new message.</param>
        public static void GenerateMessageHandler(CodeWriter fi, string messageName,
            MessageResult oldmessage, MessageResult newmessage)
        {
            fi.WriteLine($"public class Handler{messageName} ",
                $": HandlerBase<NewProtos.{messageName}, OldProtos.{messageName}>");
            fi.EnterCodeRegion();

            #region Base Type
            fi.WriteLine("#region Base Type");
            fi.WriteLine($"MessageParser<NewProtos.{messageName}> newproto_parser_base = NewProtos.{messageName}.Parser;");
            fi.WriteLine($"MessageParser<OldProtos.{messageName}> oldproto_parser_base = OldProtos.{messageName}.Parser;");
            fi.WriteLine("#endregion");
            #endregion
            #region Import Types
            var oldimports = GetMessageImportTypes(oldmessage);
            var newimports = GetMessageImportTypes(newmessage);
            // Deep clone
            var bothimports = new SortedSet<string>(oldimports);
            bothimports.IntersectWith(newimports);
            fi.WriteLine("#region Import Types");
            foreach (var importLine in bothimports)
            {
                fi.WriteLine($"Handler{importLine} handler_{importLine} = new();");
            }
            fi.WriteLine("#endregion");
            #endregion

            fi.ExitCodeRegion();
        }

        public static SortedSet<string> GetMessageImportTypes(MessageResult messageResult)
        {
            SortedSet<string> res = new();
            foreach (var commonField in messageResult.commonFields)
            {
                if (commonField.isImportType) res.Add(commonField.fieldType);
            }
            foreach (var mapField in messageResult.mapFields)
            {
                if (mapField.keyIsImportType) res.Add(mapField.keyType);
                if (mapField.valueIsImportType) res.Add(mapField.valueType);
            }
            foreach (var oneofField in messageResult.oneofFields)
            {
                foreach (var oneofInnerField in oneofField.oneofInnerFields)
                {
                    if (oneofInnerField.isImportType) res.Add(oneofInnerField.fieldType);
                }
            }
            foreach (var enumField in messageResult.enumFields)
            {
                res.Add(enumField.enumName);
            }
            foreach (var messageField in messageResult.messageFields)
            {
                foreach (var addrange_single in GetMessageImportTypes(messageField))
                {
                    res.Add(addrange_single);
                }
            }
            return res;
        }
    }
}