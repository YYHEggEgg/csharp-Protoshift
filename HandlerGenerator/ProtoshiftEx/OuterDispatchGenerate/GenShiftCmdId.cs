using YYHEggEgg.Logger;

namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    internal static class GenShiftCmdId
    {
        public static void Run(CmdIdDataStructure cmdData, string genFilePath,
            Dictionary<int, List<string>> cmd_oldshiftnew_specialHandles,
            Dictionary<int, List<string>> cmd_newshiftold_specialHandles)
        {
            using (BasicCodeWriter fi = new(genFilePath))
            {
                fi.WriteLine("// <auto-generated>");
                fi.WriteLine("//     Generated by csharp-Protoshift.HandlerGenerator.");
                fi.WriteLine("// </auto-generated>");
                fi.WriteLine();
                fi.WriteLine("#region Designer Generated Code");
                fi.WriteLine("namespace csharp_Protoshift.Enhanced.Handlers.GeneratedCode");
                fi.EnterCodeRegion();
                fi.WriteLine("public static class ShiftCmdId");
                fi.EnterCodeRegion();
                InnerWork(fi, true, cmdData.cmdlist_order_new, cmd_newshiftold_specialHandles);
                fi.WriteLine("// DON'T INSERT ANY CODE HERE");
                InnerWork(fi, true, cmdData.cmdlist_order_old, cmd_oldshiftnew_specialHandles);
                fi.WriteLine();
                fi.WriteLine("public static uint NewShiftToOld(uint newCmdId)",
                    "=> NewShiftToOld(newCmdId, ReadOnlySpan<byte>.Empty);");
                fi.WriteLine();
                fi.WriteLine("public static uint OldShiftToNew(uint oldCmdId)",
                    "=> OldShiftToNew(oldCmdId, ReadOnlySpan<byte>.Empty);");
                fi.ExitCodeRegion();
                fi.ExitCodeRegion();
                fi.WriteLine("#endregion Designer generated code");
            }
        }

        private static void InnerWork(BasicCodeWriter fi, bool isGenNewShiftToOld,
            IOrderedEnumerable<IGrouping<int, (string messageName, int oldcmdid, int newcmdid)>> cmdlist_order,
            Dictionary<int, List<string>> cmd_shiftCmdId_specialHandles)
        {
            string identifier = isGenNewShiftToOld ? "New" : "Old";
            string method_identifier = isGenNewShiftToOld ? "NewShiftToOld" : "OldShiftToNew";

            fi.WriteLine($"public static uint {method_identifier}(uint {identifier}cmdid, ReadOnlySpan<byte> head)");
            fi.EnterCodeRegion();
            fi.WriteLine($"switch ({identifier}cmdid)");
            fi.EnterCodeRegion();
            foreach (var grp in cmdlist_order)
            {
                if (grp.Count() == 1)
                {
                    #region 1. No conflict
                    var tuple = grp.First();
                    if (isGenNewShiftToOld)
                        fi.WriteLine($"case {tuple.newcmdid}: return {tuple.oldcmdid}; // {tuple.messageName}");
                    else
                        fi.WriteLine($"case {tuple.oldcmdid}: return {tuple.newcmdid}; // {tuple.messageName}");
                    #endregion
                }
                else if (grp.Count() == 0)
                {
                    Log.Erro("2. FUCK (this line never shows)", "ShiftCmdId_Generate");
                }
                else
                {
                    #region 3. Have conflict, but solved before
                    if (cmd_shiftCmdId_specialHandles.ContainsKey(grp.Key))
                    {
                        fi.WriteLine($"case {grp.Key}: // DON'T MODIFY THIS LINE - request special handle",
                            cmd_shiftCmdId_specialHandles[grp.Key]);
                        Log.Dbug($"Successfully merged past special handle of Cmd: {grp.Key} to {method_identifier}.", "ShiftCmdId_Generate");
                    }
                    #endregion
                    #region 4. Have conflict, never solved
                    else
                    {
                        var writing_list = new List<string>
                        {
                            "// Q: Why I'm seeing this? ",
                            "// A: There's a cmdid conflict in the provided cmdid.csv file.",
                            "//    More simply, there're two proto sharing the same cmdid.",
                            "//    That may be a mistake, but if you think the file is correct,",
                            "//    that's because the two message have a difference in Channel id.",
                            "// ",
                            "//    e.g. all protos use ENET_CHANNEL_ID = 0, ",
                            "//         but DebugNotify use ENET_CHANNEL_ID = 2. ",
                            "//    In this case, you should write a code handling the packet head, ",
                            "//    or just uncomment the line not specifing 'DebugNotify'. ",
                            "// ",
                            "//    Please REMEMBER COMMENT/DELETE the line throwing exception! ",
                            "//    And don't delete 'request special handle' line, ",
                            "//    or your changes will be overwritten during the next build!"
                        };
                        foreach (var tuple in grp)
                        {
                            writing_list.Add($"// return {(isGenNewShiftToOld ? tuple.oldcmdid : tuple.newcmdid)}; // {tuple.messageName}");
                        }
                        writing_list.Add("throw new NotSupportedException(\"The cmdid conflict haven't been solved. Search for 'request special handle' in ProtoshiftHandlers/ProtoDispatch/ShiftCmdId.cs for more information.\");");
                        writing_list.Add("// DON'T MODIFY THIS LINE - end special handle");
                        fi.WriteLine($"case {grp.Key}: // DON'T MODIFY THIS LINE - request special handle",
                            writing_list);
                        Log.Warn($"ShiftCmdId.{method_identifier} has cmd_id conflict to be solved (affected {identifier}Cmd: {grp.Key}). Search for 'request special handle' in ProtoshiftHandlers/ProtoDispatch/ShiftCmdId.cs for more information.", "ShiftCmdId_Generate");
                    }
                    #endregion
                }
            }
            fi.WriteLine($"default: throw new NotSupportedException(\"The input {identifier} CmdId is unknown.\");");
            fi.ExitCodeRegion();
            fi.ExitCodeRegion();
        }
    }
}