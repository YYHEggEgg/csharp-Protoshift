namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    internal class GenProtoshiftDispatch : IDisposable
    {
        BasicCodeWriter fi;

        public GenProtoshiftDispatch(string filePath)
        {
            fi = new(filePath);
        }

        public void Run()
        {
            #region Code file Start
            fi.WriteLine("// <auto-generated>");
            fi.WriteLine("//     Generated by csharp-Protoshift.HandlerGenerator. ");
            fi.WriteLine("// </auto-generated>");
            fi.WriteLine();
            fi.WriteLine("#nullable enable");
            fi.WriteLine("#region Designer Generated Code");
            fi.WriteLine("using Google.Protobuf;");
            fi.WriteLine();
            fi.WriteLine("namespace csharp_Protoshift.Enhanced.Handlers.GeneratedCode");
            fi.EnterCodeRegion();
            fi.WriteLine("public static class ProtoshiftDispatch");
            fi.EnterCodeRegion();
            #endregion

            #region Code file End
            fi.ExitCodeRegion();
            fi.ExitCodeRegion();
            fi.WriteLine("#nullable disable");
            fi.WriteLine("#endregion Designer generated code");
            #endregion
        }

        #region IDisposable support
        private bool disposedValue;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects)
                }

                // TODO: free unmanaged resources (unmanaged objects) and override finalizer
                // TODO: set large fields to null
                disposedValue = true;
            }
        }

        // // TODO: override finalizer only if 'Dispose(bool disposing)' has code to free unmanaged resources
        // ~GenProtoshiftDispatch()
        // {
        //     // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        //     Dispose(disposing: false);
        // }

        public void Dispose()
        {
            // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}