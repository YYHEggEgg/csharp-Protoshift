using YYHEggEgg.Logger;

namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    internal static class GenAskCmdId
    {
        public static void Run(CmdIdDataStructure cmdData,
            string oldAskCmdIdPath, string newAskCmdIdPath, 
            Dictionary<int, List<string>> cmd_askoldcmdid_specialHandles,
            Dictionary<int, List<string>> cmd_asknewcmdid_specialHandles)
        {
            InnerGen(oldAskCmdIdPath, false, cmdData.oldcmdids, 
                cmd_askoldcmdid_specialHandles, cmdData.cmdlist_order_old);
            InnerGen(newAskCmdIdPath, true, cmdData.newcmdids, 
                cmd_asknewcmdid_specialHandles, cmdData.cmdlist_order_new);
        }

        private static void InnerGen(string genFilePath, bool isGenForNewProtos,
            List<(string messageName, int cmdId)> cmdids,
            Dictionary<int, List<string>> cmd_askcmdid_specialHandles,
            IOrderedEnumerable<IGrouping<int, (string messageName, int oldcmdid, int newcmdid)>> cmdlist_order)
        {
            string identifier = isGenForNewProtos ? "New" : "Old";

            using (BasicCodeWriter fi = new(genFilePath))
            {
                fi.WriteLine("// <auto-generated>");
                fi.WriteLine("//     Generated by csharp-Protoshift.HandlerGenerator.");
                fi.WriteLine("// </auto-generated>");
                fi.WriteLine();
                fi.WriteLine("#nullable enable");
                fi.WriteLine("#region Designer Generated Code");
                fi.WriteLine();
                fi.WriteLine($"namespace {identifier}Protos");
                fi.EnterCodeRegion();
                fi.WriteLine("public static class AskCmdId");
                fi.EnterCodeRegion();
                fi.WriteLine("public static uint GetCmdIdFromProtoname(string protoname)");
                fi.EnterCodeRegion();
                fi.WriteLine("switch (protoname)");
                fi.EnterCodeRegion();
                cmdids.Sort((l, r) => l.messageName.CompareTo(r.messageName));
                foreach (var cmdPair in cmdids)
                {
                    fi.WriteLine($"case \"{cmdPair.messageName}\": return {cmdPair.cmdId};");
                }
                fi.WriteLine($"default: throw new NotSupportedException(\"Unknown message name or it doesn't have cmd_id.\");");
                fi.ExitCodeRegion();
                fi.ExitCodeRegion();
                fi.WriteLine("// DON'T INSERT ANY CODE HERE");
                fi.WriteLine("public static string GetProtonameFromCmdId(uint cmdid)");
                fi.EnterCodeRegion();
                fi.WriteLine("switch (cmdid)");
                fi.EnterCodeRegion();
                foreach (var grp in cmdlist_order)
                {
                    if (grp.Count() == 1)
                    {
                        #region 1. No conflict
                        var tuple = grp.First();
                        fi.WriteLine($"case {grp.Key}: return \"{tuple.messageName}\";");
                        #endregion
                    }
                    else if (grp.Count() == 0)
                    {
                        Log.Erro("2. FUCK (this line never shows)", "AskCmdId_Generate");
                    }
                    else
                    {
                        #region 3. Have conflict, but solved before
                        if (cmd_askcmdid_specialHandles.ContainsKey(grp.Key))
                        {
                            fi.WriteLine($"case {grp.Key}: // DON'T MODIFY THIS LINE - request special handle",
                                cmd_askcmdid_specialHandles[grp.Key]);
                            Log.Dbug($"Successfully merged past special handle of Cmd: {grp.Key} to {identifier}Protos.GetProtonameFromCmdId.", "AskCmdId_Generate");
                        }
                        #endregion
                        #region 4. Have conflict, never solved
                        else
                        {
                            var writing_list = new List<string>
                            {
                                "// Q: Why I'm seeing this? ",
                                "// A: There's a cmdid conflict in the provided cmdid.csv file.",
                                "//    More simply, there're two proto sharing the same cmdid.",
                                "//    That may be a mistake, but if you think the file is correct,",
                                "//    that's because the two message have a difference in Channel id.",
                                "// ",
                                "//    e.g. all protos use ENET_CHANNEL_ID = 0, ",
                                "//         but DebugNotify use ENET_CHANNEL_ID = 2. ",
                                "//    In this case, you may just uncomment the line not specifing 'DebugNotify'. ",
                                "// ",
                                "//    Please REMEMBER COMMENT/DELETE the line throwing exception! ",
                                "//    And don't delete 'request special handle' line, ",
                                "//    or your changes will be overwritten during the next build!"
                            };
                            foreach (var tuple in grp)
                            {
                                writing_list.Add($"// return \"{tuple.messageName}\";");
                            }
                            writing_list.Add($"return \"<unknown cmdid conflicted proto, cmdid: {grp.Key}>\";");
                            writing_list.Add("// DON'T MODIFY THIS LINE - end special handle");
                            fi.WriteLine($"case {grp.Key}: // DON'T MODIFY THIS LINE - request special handle",
                                writing_list);
                            Log.Warn($"({identifier}Protos) AskCmdId.GetProtonameFromCmdId has cmd_id conflict to be solved (affected {identifier}Cmd: {grp.Key}). Search for 'request special handle' in {identifier}ProtoHandlers/AskCmdId.cs for more information.", "AskCmdId_Generate");
                        }
                        #endregion
                    }
                }
                fi.WriteLine($"default: throw new NotSupportedException(\"The input {identifier} CmdId is unknown.\");");
                fi.ExitCodeRegion();
                fi.ExitCodeRegion();
                fi.WriteLine();
                fi.WriteLine("public static bool TryGetCmdIdFromProtoname(string protoname, out uint? cmdid)");
                fi.EnterCodeRegion();
                fi.WriteLine("try");
                fi.EnterCodeRegion();
                fi.WriteLine("cmdid = GetCmdIdFromProtoname(protoname);");
                fi.WriteLine("return true;");
                fi.ExitCodeRegion();
                fi.WriteLine("catch { cmdid = null; return false; }");
                fi.ExitCodeRegion();
                fi.WriteLine();
                fi.WriteLine("public static bool TryGetProtonameFromCmdId(uint cmdid, out string? protoname)");
                fi.EnterCodeRegion();
                fi.WriteLine("try");
                fi.EnterCodeRegion();
                fi.WriteLine("protoname = GetProtonameFromCmdId(cmdid);");
                fi.WriteLine("return true;");
                fi.ExitCodeRegion();
                fi.WriteLine("catch { protoname = null; return false; }");
                fi.ExitCodeRegion();

                fi.ExitCodeRegion();
                fi.ExitCodeRegion();
                fi.WriteLine("#nullable disable");
                fi.WriteLine("#endregion Designer generated code");
            }
        }
    }
}