// Generated by ChatGPT

using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace csharp_Protoshift.Enhanced.Handlers.Generator
{
    public class CommonResult
    {
        public string fieldType { get; set; } = "";
        public string fieldName { get; set; } = "";
        public bool IsRepeatedField { get; set; } = false;
        public bool isImportType { get; set; } = false;

        public override string ToString()
        {
            return $"Field Type: {fieldType}, Field Name: {fieldName}, Is Repeated: {IsRepeatedField}, Is Import Type: {isImportType}";
        }
    }

    public class MapResult
    {
        public string keyType { get; set; } = "";
        public bool keyIsImportType { get; set; } = false;
        public string valueType { get; set; } = "";
        public bool valueIsImportType { get; set; } = false;
        public string fieldName { get; set; } = "";

        public override string ToString()
        {
            return $"Map Field Name: {fieldName}, Key Type: {keyType}, Is Import Type: {keyIsImportType}, Value Type: {valueType}, Is Import Type: {valueIsImportType}";
        }
    }

    public class OneofResult
    {
        public string oneofEntryName { get; set; } = "";
        public List<CommonResult> oneofInnerFields { get; set; } = new();

        public override string ToString()
        {
            string result = "";
            result += $"Oneof Field Name: {oneofEntryName}\nStart Oneof Fields:-----------\n";
            foreach (CommonResult common in oneofInnerFields)
            {
                result += $"{common}\n";
            }
            result += "End Oneof FIelds-------------------";
            return result;
        }
    }

    public class EnumResult
    {
        public string enumName { get; set; } = "";
        public List<string> enumNodes { get; set; } = new();

        public override string ToString()
        {
            string result = "";
            result += $"Enum: {enumName}";
            foreach (string node in enumNodes)
            {
                result += $"\nField Name: {node}";
            }
            return result;
        }
    }

    public class MessageResult
    {
        public string messageName { get; set; } = "";
        public List<CommonResult> commonFields { get; set; } = new();
        public List<MapResult> mapFields { get; set; } = new();
        public List<OneofResult> oneofFields { get; set; } = new();
        public List<EnumResult> enumFields { get; set; } = new();

        public override string ToString()
        {
            string result = "";
            result += $"Message: {messageName}";
            foreach (CommonResult common in commonFields)
            {
                result += $"\n{common}";
            }
            foreach (MapResult map in mapFields)
            {
                result += $"\n{map}";
            }
            foreach (OneofResult oneof in oneofFields)
            {
                result += $"\n{oneof}";
            }
            foreach (EnumResult _enum in enumFields)
            {
                result += $"\nInMessage {_enum}";
            }
            return result;
        }
    }

    public class ProtoJsonResult
    {
        public List<MessageResult> messageBodys { get; set; } = new();
        public List<EnumResult> enumBodys { get; set; } = new();

        public override string ToString()
        {
            string result = "";
            foreach (MessageResult message in messageBodys)
            {
                result += $"{message}\n";
            }
            foreach (EnumResult _enum in enumBodys)
            {
                result += $"{_enum}\n";
            }
            return result;
        }
    }
}